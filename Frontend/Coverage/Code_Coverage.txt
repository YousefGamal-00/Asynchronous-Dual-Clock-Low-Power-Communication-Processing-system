Coverage Report by instance with details

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_RST_SYNC
=== Design Unit: work.RST_SYNC
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_RST_SYNC

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RST_SYNC.v
------------------------------------IF Branch------------------------------------
    17                                        17     Count coming in to IF
    17              1                          5             if(!RST)  // Asynchronous reset active (low)
    21              1                         12             else  // Normal operation
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_RST_SYNC --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RST_SYNC.v
    1                                                module RST_SYNC #(parameter NUM_STAGES = 2) 
    2                                                (
    3                                                    input  wire CLK,       // Clock signal for synchronization
    4                                                    input  wire RST,       // Asynchronous reset input (active low)
    5                                                    output wire SYNC_RST   // Synchronized reset output (active low) 
    6                                                );
    7                                                
    8                                                // Internal register for synchronization stages
    9                                                reg [NUM_STAGES-1 : 0] RST_reg ; 
    10                                               
    11                                               // Output the synchronized reset from the last stage
    12                                               assign SYNC_RST = RST_reg[NUM_STAGES-1];
    13                                               
    14                                               // Synchronous logic to handle reset synchronization
    15              1                         17     always @(posedge CLK or negedge RST) 
    16                                                   begin
    17                                                       if(!RST)  // Asynchronous reset active (low)
    18                                                           begin
    19              1                          5                     RST_reg <= 'd0 ;  // Clear all stages to 0
    20                                                           end
    21                                                       else  // Normal operation
    22                                                           begin
    23              1                         12                     RST_reg <= {RST_reg[NUM_STAGES-2 : 0], 1'b1} ;  // Shift in 1'b1 to propagate reset release

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_RST_SYNC --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                               RST           1           1                              100.00 
                                      RST_reg[1-0]           1           1                              100.00 
                                          SYNC_RST           1           1                              100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U1_RST_SYNC
=== Design Unit: work.RST_SYNC
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U1_RST_SYNC

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RST_SYNC.v
------------------------------------IF Branch------------------------------------
    17                                        20     Count coming in to IF
    17              1                          8             if(!RST)  // Asynchronous reset active (low)
    21              1                         12             else  // Normal operation
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U1_RST_SYNC --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RST_SYNC.v
    1                                                module RST_SYNC #(parameter NUM_STAGES = 2) 
    2                                                (
    3                                                    input  wire CLK,       // Clock signal for synchronization
    4                                                    input  wire RST,       // Asynchronous reset input (active low)
    5                                                    output wire SYNC_RST   // Synchronized reset output (active low) 
    6                                                );
    7                                                
    8                                                // Internal register for synchronization stages
    9                                                reg [NUM_STAGES-1 : 0] RST_reg ; 
    10                                               
    11                                               // Output the synchronized reset from the last stage
    12                                               assign SYNC_RST = RST_reg[NUM_STAGES-1];
    13                                               
    14                                               // Synchronous logic to handle reset synchronization
    15              1                         20     always @(posedge CLK or negedge RST) 
    16                                                   begin
    17                                                       if(!RST)  // Asynchronous reset active (low)
    18                                                           begin
    19              1                          8                     RST_reg <= 'd0 ;  // Clear all stages to 0
    20                                                           end
    21                                                       else  // Normal operation
    22                                                           begin
    23              1                         12                     RST_reg <= {RST_reg[NUM_STAGES-2 : 0], 1'b1} ;  // Shift in 1'b1 to propagate reset release

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U1_RST_SYNC --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                               RST           1           1                              100.00 
                                      RST_reg[1-0]           1           1                              100.00 
                                          SYNC_RST           1           1                              100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ref_Data_sync/U_PULSE_GEN
=== Design Unit: work.PULSE_GEN
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync/U_PULSE_GEN

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PULSE_GEN.v
------------------------------------IF Branch------------------------------------
    15                                      5250     Count coming in to IF
    15              1                          8             if (!RST) 
    20              1                       5242             else     
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync/U_PULSE_GEN --

  File PULSE_GEN.v
----------------Focused Expression View-----------------
Line       29 Item    1  (reg_SIG_0 && ~reg_SIG_1)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   reg_SIG_0         Y
   reg_SIG_1         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  reg_SIG_0_0           -                             
  Row   2:          1  reg_SIG_0_1           ~reg_SIG_1                    
  Row   3:          1  reg_SIG_1_0           reg_SIG_0                     
  Row   4:          1  reg_SIG_1_1           reg_SIG_0                     


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       6         6         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync/U_PULSE_GEN --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PULSE_GEN.v
    1                                                module PULSE_GEN 
    2                                                (
    3                                                    input  wire CLK       , // Clock signal
    4                                                    input  wire RST       , // Active-low reset
    5                                                    input  wire LVL_SIG   , // Level signal (input to be converted to pulse)
    6                                                    output wire PULSE_SIG   // Generated pulse signal (1 cycle when LVL_SIG rises)
    7                                                );
    8                                                
    9                                                    // Registers to hold current and previous value of LVL_SIG
    10                                                   reg reg_SIG_0, reg_SIG_1; 
    11                                               
    12                                                   // Sequential logic: capture LVL_SIG on rising edge of CLK
    13              1                       5250         always @(posedge CLK or negedge RST) 
    14                                                   begin
    15                                                       if (!RST) 
    16                                                       begin        
    17              1                          8                 reg_SIG_0 <= 1'b0;   // Reset register storing current LVL_SIG
    18              1                          8                 reg_SIG_1 <= 1'b0;   // Reset register storing previous LVL_SIG
    19                                                       end
    20                                                       else     
    21                                                       begin
    22              1                       5242                 reg_SIG_0 <= LVL_SIG;   // Store current input
    23              1                       5242                 reg_SIG_1 <= reg_SIG_0; // Store previous input
    24                                                       end
    25                                                   end
    26                                               
    27                                                   // Pulse generation logic: 
    28                                                   // Assert PULSE_SIG for one cycle when LVL_SIG transitions from 0 -> 1
    29              1                       3494         assign PULSE_SIG = reg_SIG_0 && (!reg_SIG_1);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         12        12         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync/U_PULSE_GEN --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                           LVL_SIG           1           1                              100.00 
                                         PULSE_SIG           1           1                              100.00 
                                               RST           1           1                              100.00 
                                         reg_SIG_0           1           1                              100.00 
                                         reg_SIG_1           1           1                              100.00 

Total Node Count     =          6 
Toggled Node Count   =          6 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (12 of 12 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ref_Data_sync
=== Design Unit: work.DATA_SYNC
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         7         7         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DATA_SYNC.v
------------------------------------IF Branch------------------------------------
    37                                      5250     Count coming in to IF
    37              1                          8         if(!RST)
    41              1                       5242         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    50                                      2693     Count coming in to IF
    50              1                          8         if(!RST)
    54              1                        873         else if(Pulse_en)
    58              1                       1812         else 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    68                                      2631     Count coming in to IF
    68              1                          8         if(!RST)
    72              1                       2623         else 
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DATA_SYNC.v
    6                                                module DATA_SYNC #(parameter NUM_STAGES = 2 , // Number of synchronization stages for metastability
    7                                                                   parameter BUS_WIDTH = 8)   // Width of the bus to be synchronized
    8                                                (
    9                                                    input wire                   CLK          , // Clock signal
    10                                                   input wire                   RST          , // Asynchronous reset (active low)
    11                                                   input wire                   BUS_EN       , // Enable signal for bus synchronization
    12                                                   input wire [BUS_WIDTH-1 : 0] unsync_bus   , // Asynchronous input bus
    13                                                   output reg [BUS_WIDTH-1 : 0] sync_bus     , // Synchronized output bus
    14                                                   output reg                   enable_pulse   // Pulse output when bus is enabled and synchronized
    15                                               );
    16                                               
    17                                               // Internal registers and wires
    18                                               reg [NUM_STAGES-1 :0] en_reg ; // Shift register for synchronizing BUS_EN
    19                                               wire sync_en, Pulse_en ;       // Wires for synchronized enable and pulse enable
    20                                               
    21                                               // Instantiate PULSE_GEN module to generate pulse on enable
    22                                               PULSE_GEN U_PULSE_GEN
    23                                               (
    24                                                   .CLK       (CLK) , 
    25                                                   .RST       (RST) , 
    26                                                   .LVL_SIG   (sync_en) , 
    27                                                   .PULSE_SIG (Pulse_en)   
    28                                               );
    29                                               
    30                                               
    31                                               // Assigning the Sync_enable 
    32                                               assign sync_en = en_reg[NUM_STAGES-1] ;
    33                                               
    34                                               // Synchronize BUS_EN through multiple stages to avoid metastability
    35              1                       5250     always @(posedge CLK or negedge RST) 
    36                                               begin
    37                                                   if(!RST)
    38                                                       begin
    39              1                          8                 en_reg <= 'd0 ; // Reset all stages to 0
    40                                                       end    
    41                                                   else 
    42                                                       begin
    43              1                       5242                 en_reg <= {en_reg[NUM_STAGES-2 :0] , BUS_EN} ; // Shift in BUS_EN to the register
    44                                                       end    
    45                                               end
    46                                               
    47                                               // Capture the unsynchronized bus data when pulse is enabled
    48              1                       2693     always @(posedge CLK or negedge RST) 
    49                                               begin
    50                                                   if(!RST)
    51                                                       begin
    52              1                          8                 sync_bus <= 'd0 ; // Reset sync_bus to 0
    53                                                       end    
    54                                                   else if(Pulse_en)
    55                                                       begin
    56              1                        873                 sync_bus <= unsync_bus ; // Capture unsync_bus on pulse
    57                                                       end    
    58                                                   else 
    59                                                       begin
    60              1                       1812                 sync_bus <= sync_bus ; // Hold the current value
    61                                                       end    
    62                                               end
    63                                               
    64                                               
    65                                               // Output the enable pulse
    66              1                       2631     always @(posedge CLK or negedge RST) 
    67                                               begin
    68                                                   if(!RST)
    69                                                       begin
    70              1                          8                 enable_pulse <= 1'b0 ; // Reset enable_pulse to 0
    71                                                       end
    72                                                   else 
    73                                                       begin
    74              1                       2623                 enable_pulse <= Pulse_en ; // Output the pulse enable signal

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         48        48         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ref_Data_sync --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            BUS_EN           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                          Pulse_en           1           1                              100.00 
                                               RST           1           1                              100.00 
                                       en_reg[1-0]           1           1                              100.00 
                                      enable_pulse           1           1                              100.00 
                                     sync_bus[7-0]           1           1                              100.00 
                                           sync_en           1           1                              100.00 
                                   unsync_bus[0-7]           1           1                              100.00 

Total Node Count     =         24 
Toggled Node Count   =         24 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (48 of 48 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_MEM
=== Design Unit: work.ASYNC_FIFO_MEM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         3         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_MEM

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_MEM.v
------------------------------------IF Branch------------------------------------
    30                                       783     Count coming in to IF
    30              1                          8         if(!W_RST)
    37              1                        501         else if(W_CLKEN)
                                             274     All False Count
Branch totals: 3 hits of 3 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         1         1    50.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_MEM --

  File ASYNC_FIFO_MEM.v
----------------Focused Expression View-----------------
Line       23 Item    1  (~W_FULL & W_INC)
Expression totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      W_FULL         N  '_1' not hit             Hit '_1'
       W_INC         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  W_FULL_0              W_INC                         
  Row   2:    ***0***  W_FULL_1              W_INC                         
  Row   3:          1  W_INC_0               ~W_FULL                       
  Row   4:          1  W_INC_1               ~W_FULL                       


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       7         7         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_MEM --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_MEM.v
    1                                                module ASYNC_FIFO_MEM #(parameter DATA_WIDTH = 8 , DEPTH = 8)
    2                                                 (
    3                                                    // Inputs:
    4                                                    input wire                       W_CLK  ,  // Write clock
    5                                                    input wire                       W_RST  ,  // Write Reset
    6                                                    input wire                       W_INC  ,  // Write increment signal
    7                                                    input wire                       W_FULL ,  // Write full flag
    8                                                    input wire  [$clog2(DEPTH)-1 :0] w_addr ,  // Write address
    9                                                    input wire  [$clog2(DEPTH)-1 :0] r_addr ,  // Read address
    10                                                   input wire  [DATA_WIDTH-1 :0]    w_data ,  // Write data input
    11                                                   // Outputs:
    12                                                   output wire [DATA_WIDTH-1 :0]    r_data   // Read data output
    13                                                );
    14                                               
    15                                               // Loop Counter 
    16                                               integer i ; 
    17                                               // W_CLKEN: Write clock enable signal
    18                                               wire W_CLKEN ; 
    19                                               // FIFO_MEM: Memory array for storing FIFO data
    20                                               reg [DATA_WIDTH-1 :0] FIFO_MEM [DEPTH-1 :0] ;
    21                                               
    22                                               // Write clock enable assignment: Enable write if not full and increment is high
    23              1                        543     assign W_CLKEN = !W_FULL & W_INC   ;
    24                                               // Read data assignment: Output data from memory at read address
    25              1                        874     assign r_data = FIFO_MEM[r_addr] ;
    26                                               
    27                                               // Write operation: On positive edge of write clock, if enabled, write data to memory at write address
    28              1                        783     always @(posedge W_CLK or negedge W_RST) 
    29                                               begin
    30                                                   if(!W_RST)
    31                                                       begin
    32              1                          8                for (i=0 ; i<DEPTH ; i=i+1) 
    32              2                         64     
    33                                                           begin
    34              1                         64                     FIFO_MEM[i] <= 'd0 ;
    35                                                           end 
    36                                                       end
    37                                                   else if(W_CLKEN)
    38                                                       begin
    39              1                        501                 FIFO_MEM[w_addr] <= w_data ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        118        52        66    44.06%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_MEM --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                             W_CLK           1           1                              100.00 
                                           W_CLKEN           1           1                              100.00 
                                            W_FULL           0           0                                0.00 
                                             W_INC           1           1                              100.00 
                                             W_RST           1           1                              100.00 
                                           i[31-0]           0           0                                0.00 
                                       r_addr[0-2]           1           1                              100.00 
                                       r_data[0-7]           1           1                              100.00 
                                       w_addr[0-2]           1           1                              100.00 
                                       w_data[0-7]           1           1                              100.00 

Total Node Count     =         59 
Toggled Node Count   =         26 
Untoggled Node Count =         33 

Toggle Coverage      =      44.06% (52 of 118 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO/U_W2R_SYNC
=== Design Unit: work.ASYNC_FIFO_BIT_SYNC
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_W2R_SYNC

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_BIT_SYNC.v
------------------------------------IF Branch------------------------------------
    15                                       818     Count coming in to IF
    15              1                          4             if(!RST)
    22              1                        814             else 
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11        11         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_W2R_SYNC --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_BIT_SYNC.v
    1                                                module ASYNC_FIFO_BIT_SYNC #(parameter B_WIDTH = 3 , STAGES= 2)
    2                                                (
    3                                                    input  wire              CLK   ,
    4                                                    input  wire              RST   , 
    5                                                    input  wire [B_WIDTH :0] ASYNC , // add extra bit as synchronizer used for Gray version or pointers  
    6                                                    output wire [B_WIDTH :0] SYNC    // add extra bit as synchronizer used for Gray version or pointers 
    7                                                );
    8                                                    
    9                                                reg [STAGES-1 :0] SYNC_reg [B_WIDTH :0];
    10                                               integer j;
    11                                               
    12                                               // Bit synchronizer registers for each bit of the asynchronous input
    13              1                        818         always @(posedge CLK or negedge RST) 
    14                                                   begin
    15                                                       if(!RST)
    16                                                           begin
    17              1                          4                     for (j =0 ; j<(B_WIDTH+1) ; j=j+1) 
    17              2                         16     
    18                                                                   begin
    19              1                         16                             SYNC_reg[j] <= 'd0 ;
    20                                                                   end
    21                                                           end
    22                                                       else 
    23                                                           begin
    24              1                        814                     for (j =0 ; j<(B_WIDTH+1) ; j=j+1) 
    24              2                       3256     
    25                                                                   begin
    26              1                       3256                             SYNC_reg[j] <= { SYNC_reg[j][STAGES-2:0]  , ASYNC[j]} ;
    27                                                                   end
    28                                                           end    
    29                                                   end
    30                                               
    31                                               // Generate block to assign synchronized outputs for each bit
    32                                                   genvar i ;
    33                                                   generate
    34                                                       for (i = 0; i<(B_WIDTH+1) ; i=i+1) 
    35                                                           begin
    36       1 (GI=0)                        545                     assign SYNC[i] = SYNC_reg[i][STAGES-1] ;
    36       1 (GI=1)                        545     
    36       1 (GI=2)                        545     
    36       1 (GI=3)                        545     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         84        20        64    23.80%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_W2R_SYNC --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                        ASYNC[0-3]           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                               RST           1           1                              100.00 
                                         SYNC[0-3]           1           1                              100.00 
                                           j[0-31]           0           0                                0.00 

Total Node Count     =         42 
Toggled Node Count   =         10 
Untoggled Node Count =         32 

Toggle Coverage      =      23.80% (20 of 84 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO/U_R2W_SYNC
=== Design Unit: work.ASYNC_FIFO_BIT_SYNC
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_R2W_SYNC

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_BIT_SYNC.v
------------------------------------IF Branch------------------------------------
    15                                      1515     Count coming in to IF
    15              1                          8             if(!RST)
    22              1                       1507             else 
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11        11         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_R2W_SYNC --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_BIT_SYNC.v
    1                                                module ASYNC_FIFO_BIT_SYNC #(parameter B_WIDTH = 3 , STAGES= 2)
    2                                                (
    3                                                    input  wire              CLK   ,
    4                                                    input  wire              RST   , 
    5                                                    input  wire [B_WIDTH :0] ASYNC , // add extra bit as synchronizer used for Gray version or pointers  
    6                                                    output wire [B_WIDTH :0] SYNC    // add extra bit as synchronizer used for Gray version or pointers 
    7                                                );
    8                                                    
    9                                                reg [STAGES-1 :0] SYNC_reg [B_WIDTH :0];
    10                                               integer j;
    11                                               
    12                                               // Bit synchronizer registers for each bit of the asynchronous input
    13              1                       1515         always @(posedge CLK or negedge RST) 
    14                                                   begin
    15                                                       if(!RST)
    16                                                           begin
    17              1                          8                     for (j =0 ; j<(B_WIDTH+1) ; j=j+1) 
    17              2                         32     
    18                                                                   begin
    19              1                         32                             SYNC_reg[j] <= 'd0 ;
    20                                                                   end
    21                                                           end
    22                                                       else 
    23                                                           begin
    24              1                       1507                     for (j =0 ; j<(B_WIDTH+1) ; j=j+1) 
    24              2                       6028     
    25                                                                   begin
    26              1                       6028                             SYNC_reg[j] <= { SYNC_reg[j][STAGES-2:0]  , ASYNC[j]} ;
    27                                                                   end
    28                                                           end    
    29                                                   end
    30                                               
    31                                               // Generate block to assign synchronized outputs for each bit
    32                                                   genvar i ;
    33                                                   generate
    34                                                       for (i = 0; i<(B_WIDTH+1) ; i=i+1) 
    35                                                           begin
    36       1 (GI=0)                       1007                     assign SYNC[i] = SYNC_reg[i][STAGES-1] ;
    36       1 (GI=1)                       1007     
    36       1 (GI=2)                       1007     
    36       1 (GI=3)                       1007     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         84        20        64    23.80%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_R2W_SYNC --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                        ASYNC[0-3]           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                               RST           1           1                              100.00 
                                         SYNC[0-3]           1           1                              100.00 
                                           j[0-31]           0           0                                0.00 

Total Node Count     =         42 
Toggled Node Count   =         10 
Untoggled Node Count =         32 

Toggle Coverage      =      23.80% (20 of 84 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR
=== Design Unit: work.ASYNC_FIFO_WR
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_WR.v
------------------------------------IF Branch------------------------------------
    33                                       783     Count coming in to IF
    33              1                          8             if(!W_RST)
    37              1                        501             else if(W_INC && !W_FULL)  // Increment only if write enable and not full
                                             274     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    46                                       783     Count coming in to IF
    46              1                          8             if(!W_RST)
    50              1                        775             else 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         1         1    50.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR --

  File ASYNC_FIFO_WR.v
----------------Focused Condition View-------------------
Line       37 Item    1  (W_INC && ~W_FULL)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       W_INC         Y
      W_FULL         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  W_INC_0               -                             
  Row   2:          1  W_INC_1               ~W_FULL                       
  Row   3:          1  W_FULL_0              W_INC                         
  Row   4:    ***0***  W_FULL_1              W_INC                         


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR --

  File ASYNC_FIFO_WR.v
----------------Focused Expression View-----------------
Line       22 Item    1  (COMB_G_wptr == {~High_2_bits,lower_bits})
Expression totals: 0 of 1 input term covered = 0.00%

                                  Input Term   Covered  Reason for no coverage   Hint
                                 -----------  --------  -----------------------  --------------
  (COMB_G_wptr == {~High_2_bits,lower_bits})         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                    Non-masking condition(s)      
 ---------  ---------  --------------------                          -------------------------     
  Row   1:          1  (COMB_G_wptr == {~High_2_bits,lower_bits})_0  -                             
  Row   2:    ***0***  (COMB_G_wptr == {~High_2_bits,lower_bits})_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       9         9         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_WR.v
    1                                                module ASYNC_FIFO_WR #(parameter B_WIDTH = 3)
    2                                                (
    3                                                    input wire                  W_CLK  , 
    4                                                    input wire                  W_RST  ,
    5                                                    input wire                  W_INC  ,
    6                                                    input wire  [B_WIDTH   : 0] G_rptr , // Gray pointer size = binary version + 1
    7                                                    output reg  [B_WIDTH   : 0] G_wptr , // Gray pointer size = binary version + 1
    8                                                    output wire [B_WIDTH-1 : 0] W_addr , // Binary address 
    9                                                    output wire                 W_FULL 
    10                                               );
    11                                                   // Internal wires for full condition calculation
    12                                                   wire [1:0]          High_2_bits ;  // Extract the two MSBs of the gray read pointer
    13                                                   wire [B_WIDTH-2 :0] lower_bits  ;  // Extract the lower bits of the gray read pointer
    14                                                   reg  [B_WIDTH   :0] inter_addr  ;  // Internal address which is greater by one bit than binary 
    15                                                   wire [B_WIDTH   :0] COMB_G_wptr ;  // Combinational version of Gray pointer  
    16                                               
    17                                                   // Extract bits from gray read pointer for full detection
    18                                                   assign High_2_bits = G_rptr[B_WIDTH : B_WIDTH-1] ;  // MSBs indicate wrap-around
    19                                                   assign lower_bits  = G_rptr[B_WIDTH-2 :0]        ;  // Lower bits for comparison
    20                                               
    21                                                   // Full condition: write pointer catches up to read pointer (accounting for gray code wrap)
    22              1                       1007         assign W_FULL = ( COMB_G_wptr == {~High_2_bits , lower_bits} ) ;
    23                                               
    24                                                   // Convert binary write address to gray code for cross-domain synchronization
    25              1                        506         assign COMB_G_wptr = inter_addr ^ (inter_addr >> 1) ;
    26                                               
    27                                                   // Assign output to lowest bits or intenral address 
    28              1                        506         assign W_addr = inter_addr[B_WIDTH-1 : 0] ;
    29                                                    
    30                                                   // Write address counter logic
    31              1                        783         always @(posedge W_CLK or negedge W_RST)
    32                                                   begin
    33                                                       if(!W_RST)
    34                                                           begin
    35              1                          8                     inter_addr <= 'd0 ;  // Reset write address to 0
    36                                                           end
    37                                                       else if(W_INC && !W_FULL)  // Increment only if write enable and not full
    38                                                           begin
    39              1                        501                     inter_addr <= inter_addr + 1'b1 ;  // Increment write address
    40                                                           end
    41                                                   end
    42                                                   
    43                                                   // Sequential Version of Gray pointer 
    44              1                        783         always @(posedge W_CLK or negedge W_RST)
    45                                                   begin
    46                                                       if(!W_RST)
    47                                                           begin
    48              1                          8                     G_wptr <= 'd0 ;  
    49                                                           end
    50                                                       else 
    51                                                           begin
    52              1                        775                     G_wptr <= COMB_G_wptr ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         54        52         2    96.29%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_WR --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                  COMB_G_wptr[0-3]           1           1                              100.00 
                                       G_rptr[0-3]           1           1                              100.00 
                                       G_wptr[3-0]           1           1                              100.00 
                                  High_2_bits[0-1]           1           1                              100.00 
                                             W_CLK           1           1                              100.00 
                                            W_FULL           0           0                                0.00 
                                             W_INC           1           1                              100.00 
                                             W_RST           1           1                              100.00 
                                       W_addr[0-2]           1           1                              100.00 
                                   inter_addr[3-0]           1           1                              100.00 
                                   lower_bits[0-1]           1           1                              100.00 

Total Node Count     =         27 
Toggled Node Count   =         26 
Untoggled Node Count =          1 

Toggle Coverage      =      96.29% (52 of 54 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD
=== Design Unit: work.ASYNC_FIFO_RD
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_RD.v
------------------------------------IF Branch------------------------------------
    27                                      1280     Count coming in to IF
    27              1                          4             if(!R_RST)
    31              1                        501             else if(R_INC && !R_EMPTY)  // Increment only if read enable and not empty
                                             775     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    40                                      1010     Count coming in to IF
    40              1                          4             if(!R_RST)
    44              1                       1006             else  
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         1         1    50.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD --

  File ASYNC_FIFO_RD.v
----------------Focused Condition View-------------------
Line       31 Item    1  (R_INC && ~R_EMPTY)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       R_INC         Y
     R_EMPTY         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  R_INC_0               -                             
  Row   2:          1  R_INC_1               ~R_EMPTY                      
  Row   3:          1  R_EMPTY_0             R_INC                         
  Row   4:    ***0***  R_EMPTY_1             R_INC                         


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         1         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD --

  File ASYNC_FIFO_RD.v
----------------Focused Expression View-----------------
Line       19 Item    1  (G_wptr == COMB_G_rptr)
Expression totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (G_wptr == COMB_G_rptr)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (G_wptr == COMB_G_rptr)_0  -                             
  Row   2:          1  (G_wptr == COMB_G_rptr)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       9         9         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ASYNC_FIFO_RD.v
    1                                                module ASYNC_FIFO_RD #(parameter B_WIDTH = 3)
    2                                                (
    3                                                    input wire                  R_CLK   , 
    4                                                    input wire                  R_RST   ,
    5                                                    input wire                  R_INC   ,
    6                                                    input wire  [B_WIDTH   : 0] G_wptr  , // Gray pointer size = binary version + 1
    7                                                    output reg  [B_WIDTH   : 0] G_rptr  , // Gray pointer size = binary version + 1
    8                                                    output wire [B_WIDTH-1 : 0] R_addr  , // Binary address
    9                                                    output wire                 R_EMPTY 
    10                                               );
    11                                                   // internal address which is greater by one bit than binary 
    12                                                   reg  [B_WIDTH : 0] inter_addr  ; 
    13                                                   wire [B_WIDTH : 0] COMB_G_rptr ; 
    14                                               
    15                                                   // assign output to lowest bits of internal address 
    16              1                        506         assign R_addr = inter_addr[B_WIDTH-1 : 0] ;
    17                                               
    18                                                   // EMPTY condition: Read pointer equal to Write pointer
    19              1                        776         assign R_EMPTY = ( G_wptr == COMB_G_rptr ) ;
    20                                               
    21                                                   // Convert binary READ address to gray code for cross-domain synchronization
    22              1                        506         assign COMB_G_rptr = inter_addr ^ (inter_addr >> 1) ;
    23                                               
    24                                                   // READ address counter logic
    25              1                       1280         always @(posedge R_CLK or negedge R_RST)
    26                                                   begin
    27                                                       if(!R_RST)
    28                                                           begin
    29              1                          4                     inter_addr <= 'd0 ;  // Reset address to 0
    30                                                           end
    31                                                       else if(R_INC && !R_EMPTY)  // Increment only if read enable and not empty
    32                                                           begin
    33              1                        501                     inter_addr <= inter_addr + 1'b1 ;  // Increment address
    34                                                           end
    35                                                   end
    36                                               
    37                                                   // Sequential Version of Gray pointer
    38              1                       1010         always @(posedge R_CLK or negedge R_RST)
    39                                                   begin
    40                                                       if(!R_RST)
    41                                                           begin
    42              1                          4                     G_rptr <= 'd0 ;  
    43                                                           end
    44                                                       else  
    45                                                           begin
    46              1                       1006                     G_rptr <=  COMB_G_rptr ;  

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         46        46         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO/U_FIFO_RD --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                  COMB_G_rptr[0-3]           1           1                              100.00 
                                       G_rptr[3-0]           1           1                              100.00 
                                       G_wptr[0-3]           1           1                              100.00 
                                             R_CLK           1           1                              100.00 
                                           R_EMPTY           1           1                              100.00 
                                             R_INC           1           1                              100.00 
                                             R_RST           1           1                              100.00 
                                       R_addr[0-2]           1           1                              100.00 
                                   inter_addr[3-0]           1           1                              100.00 

Total Node Count     =         23 
Toggled Node Count   =         23 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (46 of 46 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ASYNC_FIFO
=== Design Unit: work.ASYNC_FIFO_TOP
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         92        90         2    97.82%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ASYNC_FIFO --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                    A_G_R_ptr[0-3]           1           1                              100.00 
                                    A_G_w_ptr[0-3]           1           1                              100.00 
                                             EMPTY           1           1                              100.00 
                                              FULL           0           0                                0.00 
                                      RD_DATA[0-7]           1           1                              100.00 
                                    R_ADDRESS[0-2]           1           1                              100.00 
                                             R_CLK           1           1                              100.00 
                                             R_INC           1           1                              100.00 
                                             R_RST           1           1                              100.00 
                                    S_G_R_ptr[0-3]           1           1                              100.00 
                                    S_G_w_ptr[0-3]           1           1                              100.00 
                                      WR_DATA[0-7]           1           1                              100.00 
                                    W_ADDRESS[0-2]           1           1                              100.00 
                                             W_CLK           1           1                              100.00 
                                             W_INC           1           1                              100.00 
                                             W_RST           1           1                              100.00 

Total Node Count     =         46 
Toggled Node Count   =         45 
Untoggled Node Count =          1 

Toggle Coverage      =      97.82% (90 of 92 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_PULSE_GEN
=== Design Unit: work.PULSE_GEN
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_PULSE_GEN

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PULSE_GEN.v
------------------------------------IF Branch------------------------------------
    15                                      2543     Count coming in to IF
    15              1                          4             if (!RST) 
    20              1                       2539             else     
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_PULSE_GEN --

  File PULSE_GEN.v
----------------Focused Expression View-----------------
Line       29 Item    1  (reg_SIG_0 && ~reg_SIG_1)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   reg_SIG_0         Y
   reg_SIG_1         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  reg_SIG_0_0           -                             
  Row   2:          1  reg_SIG_0_1           ~reg_SIG_1                    
  Row   3:          1  reg_SIG_1_0           reg_SIG_0                     
  Row   4:          1  reg_SIG_1_1           reg_SIG_0                     


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       6         6         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_PULSE_GEN --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PULSE_GEN.v
    1                                                module PULSE_GEN 
    2                                                (
    3                                                    input  wire CLK       , // Clock signal
    4                                                    input  wire RST       , // Active-low reset
    5                                                    input  wire LVL_SIG   , // Level signal (input to be converted to pulse)
    6                                                    output wire PULSE_SIG   // Generated pulse signal (1 cycle when LVL_SIG rises)
    7                                                );
    8                                                
    9                                                    // Registers to hold current and previous value of LVL_SIG
    10                                                   reg reg_SIG_0, reg_SIG_1; 
    11                                               
    12                                                   // Sequential logic: capture LVL_SIG on rising edge of CLK
    13              1                       2543         always @(posedge CLK or negedge RST) 
    14                                                   begin
    15                                                       if (!RST) 
    16                                                       begin        
    17              1                          4                 reg_SIG_0 <= 1'b0;   // Reset register storing current LVL_SIG
    18              1                          4                 reg_SIG_1 <= 1'b0;   // Reset register storing previous LVL_SIG
    19                                                       end
    20                                                       else     
    21                                                       begin
    22              1                       2539                 reg_SIG_0 <= LVL_SIG;   // Store current input
    23              1                       2539                 reg_SIG_1 <= reg_SIG_0; // Store previous input
    24                                                       end
    25                                                   end
    26                                               
    27                                                   // Pulse generation logic: 
    28                                                   // Assert PULSE_SIG for one cycle when LVL_SIG transitions from 0 -> 1
    29              1                       1772         assign PULSE_SIG = reg_SIG_0 && (!reg_SIG_1);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         12        12         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_PULSE_GEN --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                           LVL_SIG           1           1                              100.00 
                                         PULSE_SIG           1           1                              100.00 
                                               RST           1           1                              100.00 
                                         reg_SIG_0           1           1                              100.00 
                                         reg_SIG_1           1           1                              100.00 

Total Node Count     =          6 
Toggled Node Count   =          6 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (12 of 12 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ClkDiv
=== Design Unit: work.Clk_Divider
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        11         5         6    45.45%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ClkDiv

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clk_Divider.v
------------------------------------IF Branch------------------------------------
    27                                    561707     Count coming in to IF
    27              1                          8             if (!i_rst_n) 
    33              1                     561699             else if (G_enable && !ODD) 
    46              1                    ***0***             else if (G_enable && ODD) 
    66              1                    ***0***             else 
Branch totals: 2 hits of 4 branches = 50.00%

------------------------------------IF Branch------------------------------------
    36                                    561699     Count coming in to IF
    36              1                      35106                     if (counter == half_period - 1'b1) 
    41              1                     526593                     else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    49                                   ***0***     Count coming in to IF
    49              1                    ***0***                     if ((counter == half_period - 1'b1) && CLK_FLAG) 
    55              1                    ***0***                     else if ((counter == half_period_p1 - 1'b1) && !CLK_FLAG) 
    61              1                    ***0***                     else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    73                                   1158523     Count coming in to IF
    73              1                    1158523         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;
    73              2                    ***0***         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       9         1         8    11.11%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_ClkDiv --

  File Clk_Divider.v
----------------Focused Condition View-------------------
Line       33 Item    1  (G_enable && ~ODD)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    G_enable         N  '_0' not hit             Hit '_0'
         ODD         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  G_enable_0            -                             
  Row   2:          1  G_enable_1            ~ODD                          
  Row   3:          1  ODD_0                 G_enable                      
  Row   4:    ***0***  ODD_1                 G_enable                      

----------------Focused Condition View-------------------
Line       36 Item    1  (counter == (half_period - 1'b1))
Condition totals: 1 of 1 input term covered = 100.00%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
  (counter == (half_period - 1'b1))         Y

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:          1  (counter == (half_period - 1'b1))_0  -                             
  Row   2:          1  (counter == (half_period - 1'b1))_1  -                             

----------------Focused Condition View-------------------
Line       46 Item    1  (G_enable && ODD)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    G_enable         N  No hits                  Hit '_0' and '_1'
         ODD         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  G_enable_0            -                             
  Row   2:    ***0***  G_enable_1            ODD                           
  Row   3:    ***0***  ODD_0                 G_enable                      
  Row   4:    ***0***  ODD_1                 G_enable                      

----------------Focused Condition View-------------------
Line       49 Item    1  ((counter == (half_period - 1'b1)) && CLK_FLAG)
Condition totals: 0 of 2 input terms covered = 0.00%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
  (counter == (half_period - 1'b1))         N  No hits                  Hit '_0' and '_1'
                           CLK_FLAG         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:    ***0***  (counter == (half_period - 1'b1))_0  -                             
  Row   2:    ***0***  (counter == (half_period - 1'b1))_1  CLK_FLAG                      
  Row   3:    ***0***  CLK_FLAG_0                           (counter == (half_period - 1'b1))
  Row   4:    ***0***  CLK_FLAG_1                           (counter == (half_period - 1'b1))

----------------Focused Condition View-------------------
Line       55 Item    1  ((counter == (half_period_p1 - 1'b1)) && ~CLK_FLAG)
Condition totals: 0 of 2 input terms covered = 0.00%

                            Input Term   Covered  Reason for no coverage   Hint
                           -----------  --------  -----------------------  --------------
  (counter == (half_period_p1 - 1'b1))         N  No hits                  Hit '_0' and '_1'
                              CLK_FLAG         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                              Non-masking condition(s)      
 ---------  ---------  --------------------                    -------------------------     
  Row   1:    ***0***  (counter == (half_period_p1 - 1'b1))_0  -                             
  Row   2:    ***0***  (counter == (half_period_p1 - 1'b1))_1  ~CLK_FLAG                     
  Row   3:    ***0***  CLK_FLAG_0                              (counter == (half_period_p1 - 1'b1))
  Row   4:    ***0***  CLK_FLAG_1                              (counter == (half_period_p1 - 1'b1))


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      5         1         4    20.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_ClkDiv --

  File Clk_Divider.v
----------------Focused Expression View-----------------
Line       19 Item    1  (i_clk_en && ~illegal_ratio)
Expression totals: 0 of 2 input terms covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
       i_clk_en         N  '_0' not hit             Hit '_0'
  illegal_ratio         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_clk_en_0            -                             
  Row   2:          1  i_clk_en_1            ~illegal_ratio                
  Row   3:          1  illegal_ratio_0       i_clk_en                      
  Row   4:    ***0***  illegal_ratio_1       i_clk_en                      

-----------Focused Expression View (Bimodal)------------
Line       73 Item    1  (G_enable? div_clk: i_ref_clk)
Expression totals: 1 of 3 input terms covered = 33.33%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
     G_enable         N  '_1' hit but '_0' not hit              Hit '_0' for output ->0 or ->1
      div_clk         Y
    i_ref_clk         N  No hits                                Hit '_0' and '_1' for different outputs

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           0  G_enable_0            -                                  
 Row   2:           1           1  G_enable_1            -                                  
 Row   3:           1           0  div_clk_0             G_enable                           
 Row   4:           0           1  div_clk_1             G_enable                           
 Row   5:           0           0  i_ref_clk_0           ~G_enable                          
 Row   6:           0           0  i_ref_clk_1           ~G_enable                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        12         8    60.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ClkDiv --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clk_Divider.v
    1                                                module Clk_Divider 
    2                                                (
    3                                                    input  wire       i_ref_clk   ,  // Reference input clock
    4                                                    input  wire       i_rst_n     ,  // Active-low reset
    5                                                    input  wire       i_clk_en    ,  // Clock enable signal
    6                                                    input  wire [7:0] i_div_ratio ,  // Division ratio (N)
    7                                                    output wire       o_div_clk      // Divided clock output
    8                                                );
    9                                                
    10                                                   // Internal signals
    11                                                   reg  [7:0] counter;
    12                                                   reg        div_clk;
    13                                                   reg        CLK_FLAG; // Used instead of clock in some conditions to prevent issues in DFT
    14                                                   wire [7:0] half_period, half_period_p1;
    15                                                   wire       illegal_ratio, G_enable, ODD;
    16                                               
    17                                                   // Combinational logic
    18              1                          2         assign illegal_ratio  = (!i_div_ratio) || (i_div_ratio == 8'd1); // Illegal ratio: 0 or 1 not allowed
    19              1                          3         assign G_enable       = i_clk_en && !illegal_ratio;              // Enable only if clk_en is high & ratio legal
    20                                                   assign ODD            = i_div_ratio[0];                          // Indicator if ratio is odd
    21              1                          2         assign half_period    = i_div_ratio >> 1'b1;                     // Half-period for even division
    22              1                          3         assign half_period_p1 = half_period + 1'b1;                      // Half-period + 1 for odd division handling
    23                                               
    24                                                   // Clock divider logic + counter
    25              1                     561707         always @(posedge i_ref_clk or negedge i_rst_n) 
    26                                                   begin
    27                                                       if (!i_rst_n) 
    28                                                           begin
    29              1                          8                     div_clk  <= 1'b0;   // Reset output clock
    30              1                          8                     CLK_FLAG <= 1'b0;   // Reset flag
    31              1                          8                     counter  <= 8'd0;   // Reset counter
    32                                                           end 
    33                                                       else if (G_enable && !ODD) 
    34                                                           begin
    35                                                               // Even division
    36                                                               if (counter == half_period - 1'b1) 
    37                                                                   begin
    38              1                      35106                             div_clk <= ~div_clk; // Toggle clock
    39              1                      35106                             counter <= 8'd0;     // Reset counter
    40                                                                   end 
    41                                                               else 
    42                                                                   begin
    43              1                     526593                             counter <= counter + 1'b1; // Increment counter
    44                                                                   end
    45                                                           end 
    46                                                       else if (G_enable && ODD) 
    47                                                           begin
    48                                                               // Odd division
    49                                                               if ((counter == half_period - 1'b1) && CLK_FLAG) 
    50                                                                   begin
    51              1                    ***0***                             div_clk  <= 1'b0;            
    52              1                    ***0***                             counter  <= 8'd0;
    53              1                    ***0***                             CLK_FLAG <= ~CLK_FLAG;            
    54                                                                   end 
    55                                                               else if ((counter == half_period_p1 - 1'b1) && !CLK_FLAG) 
    56                                                                   begin
    57              1                    ***0***                             div_clk  <= 1'b1;           
    58              1                    ***0***                             counter  <= 8'd0;
    59              1                    ***0***                             CLK_FLAG <= ~CLK_FLAG;            
    60                                                                   end 
    61                                                               else 
    62                                                                   begin
    63              1                    ***0***                             counter <= counter + 1'b1; // Increment counter
    64                                                                   end
    65                                                           end 
    66                                                       else 
    67                                                           begin
    68              1                    ***0***                     counter <= 8'd0;
    69                                                           end
    70                                                   end
    71                                               
    72                                                   // Output assignment 
    73              1                    1158525         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         82        16        66    19.51%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ClkDiv --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                          CLK_FLAG           0           0                                0.00 
                                          G_enable           0           0                                0.00 
                                               ODD           0           0                                0.00 
                                      counter[7-4]           0           0                                0.00 
                                      counter[3-0]           1           1                              100.00 
                                           div_clk           1           1                              100.00 
                                  half_period[0-7]           0           0                                0.00 
                               half_period_p1[0-7]           0           0                                0.00 
                                          i_clk_en           0           0                                0.00 
                                  i_div_ratio[0-7]           0           0                                0.00 
                                         i_ref_clk           1           1                              100.00 
                                           i_rst_n           1           1                              100.00 
                                     illegal_ratio           0           0                                0.00 
                                         o_div_clk           1           1                              100.00 

Total Node Count     =         41 
Toggled Node Count   =          8 
Untoggled Node Count =         33 

Toggle Coverage      =      19.51% (16 of 82 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_CLKDIV_MUX
=== Design Unit: work.CLKDIV_MUX
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         3         2    60.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_CLKDIV_MUX

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CLKDIV_MUX.v
------------------------------------CASE Branch------------------------------------
    9                                          6     Count coming in to CASE
    10              1                          3             6'd32   : OUT = 4'd1 ;   // Select divide by 1
    11              1                          1             6'd16   : OUT = 4'd2 ;   // Select divide by 2
    12              1                          2             6'd8    : OUT = 4'd4 ;   // Select divide by 4
    13              1                    ***0***             6'd4    : OUT = 4'd8 ;   // Select divide by 8
    14              1                    ***0***             default : OUT = 4'd1 ;   // Default case: RX_CLK = TX_CLK * 32
Branch totals: 3 hits of 5 branches = 60.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       6         4         2    66.66%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_CLKDIV_MUX --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CLKDIV_MUX.v
    1                                                module CLKDIV_MUX 
    2                                                (
    3                                                    input  wire [5:0] IN  ,  // Control input
    4                                                    output reg  [3:0] OUT    // Division factor output
    5                                                );
    6                                                
    7               1                          6     always @(*) 
    8                                                begin
    9                                                    case (IN) 
    10              1                          3             6'd32   : OUT = 4'd1 ;   // Select divide by 1
    11              1                          1             6'd16   : OUT = 4'd2 ;   // Select divide by 2
    12              1                          2             6'd8    : OUT = 4'd4 ;   // Select divide by 4
    13              1                    ***0***             6'd4    : OUT = 4'd8 ;   // Select divide by 8
    14              1                    ***0***             default : OUT = 4'd1 ;   // Default case: RX_CLK = TX_CLK * 32

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        12         8    60.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_CLKDIV_MUX --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                           IN[0-2]           0           0                                0.00 
                                           IN[3-5]           1           1                              100.00 
                                            OUT[3]           0           0                                0.00 
                                          OUT[2-0]           1           1                              100.00 

Total Node Count     =         10 
Toggled Node Count   =          6 
Untoggled Node Count =          4 

Toggle Coverage      =      60.00% (12 of 20 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U1_ClkDiv
=== Design Unit: work.Clk_Divider
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        11         7         4    63.63%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U1_ClkDiv

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clk_Divider.v
------------------------------------IF Branch------------------------------------
    27                                    376047     Count coming in to IF
    27              1                          8             if (!i_rst_n) 
    33              1                     376035             else if (G_enable && !ODD) 
    46              1                    ***0***             else if (G_enable && ODD) 
    66              1                          4             else 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    36                                    376035     Count coming in to IF
    36              1                     277649                     if (counter == half_period - 1'b1) 
    41              1                      98386                     else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    49                                   ***0***     Count coming in to IF
    49              1                    ***0***                     if ((counter == half_period - 1'b1) && CLK_FLAG) 
    55              1                    ***0***                     else if ((counter == half_period_p1 - 1'b1) && !CLK_FLAG) 
    61              1                    ***0***                     else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    73                                   1401071     Count coming in to IF
    73              1                    1029723         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;
    73              2                     371348         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       9         2         7    22.22%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U1_ClkDiv --

  File Clk_Divider.v
----------------Focused Condition View-------------------
Line       33 Item    1  (G_enable && ~ODD)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    G_enable         Y
         ODD         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  G_enable_0            -                             
  Row   2:          1  G_enable_1            ~ODD                          
  Row   3:          1  ODD_0                 G_enable                      
  Row   4:    ***0***  ODD_1                 G_enable                      

----------------Focused Condition View-------------------
Line       36 Item    1  (counter == (half_period - 1'b1))
Condition totals: 1 of 1 input term covered = 100.00%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
  (counter == (half_period - 1'b1))         Y

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:          1  (counter == (half_period - 1'b1))_0  -                             
  Row   2:          1  (counter == (half_period - 1'b1))_1  -                             

----------------Focused Condition View-------------------
Line       46 Item    1  (G_enable && ODD)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    G_enable         N  '_1' not hit             Hit '_1'
         ODD         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  G_enable_0            -                             
  Row   2:    ***0***  G_enable_1            ODD                           
  Row   3:    ***0***  ODD_0                 G_enable                      
  Row   4:    ***0***  ODD_1                 G_enable                      

----------------Focused Condition View-------------------
Line       49 Item    1  ((counter == (half_period - 1'b1)) && CLK_FLAG)
Condition totals: 0 of 2 input terms covered = 0.00%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
  (counter == (half_period - 1'b1))         N  No hits                  Hit '_0' and '_1'
                           CLK_FLAG         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:    ***0***  (counter == (half_period - 1'b1))_0  -                             
  Row   2:    ***0***  (counter == (half_period - 1'b1))_1  CLK_FLAG                      
  Row   3:    ***0***  CLK_FLAG_0                           (counter == (half_period - 1'b1))
  Row   4:    ***0***  CLK_FLAG_1                           (counter == (half_period - 1'b1))

----------------Focused Condition View-------------------
Line       55 Item    1  ((counter == (half_period_p1 - 1'b1)) && ~CLK_FLAG)
Condition totals: 0 of 2 input terms covered = 0.00%

                            Input Term   Covered  Reason for no coverage   Hint
                           -----------  --------  -----------------------  --------------
  (counter == (half_period_p1 - 1'b1))         N  No hits                  Hit '_0' and '_1'
                              CLK_FLAG         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                              Non-masking condition(s)      
 ---------  ---------  --------------------                    -------------------------     
  Row   1:    ***0***  (counter == (half_period_p1 - 1'b1))_0  -                             
  Row   2:    ***0***  (counter == (half_period_p1 - 1'b1))_1  ~CLK_FLAG                     
  Row   3:    ***0***  CLK_FLAG_0                              (counter == (half_period_p1 - 1'b1))
  Row   4:    ***0***  CLK_FLAG_1                              (counter == (half_period_p1 - 1'b1))


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      5         4         1    80.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U1_ClkDiv --

  File Clk_Divider.v
----------------Focused Expression View-----------------
Line       19 Item    1  (i_clk_en && ~illegal_ratio)
Expression totals: 1 of 2 input terms covered = 50.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
       i_clk_en         N  '_0' not hit             Hit '_0'
  illegal_ratio         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_clk_en_0            -                             
  Row   2:          1  i_clk_en_1            ~illegal_ratio                
  Row   3:          1  illegal_ratio_0       i_clk_en                      
  Row   4:          1  illegal_ratio_1       i_clk_en                      

-----------Focused Expression View (Bimodal)------------
Line       73 Item    1  (G_enable? div_clk: i_ref_clk)
Expression totals: 3 of 3 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
     G_enable         Y
      div_clk         Y
    i_ref_clk         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  G_enable_0            -                                  
 Row   2:           1           0  G_enable_1            -                                  
 Row   3:           1           0  div_clk_0             G_enable                           
 Row   4:           0           1  div_clk_1             G_enable                           
 Row   5:           1           0  i_ref_clk_0           ~G_enable                          
 Row   6:           0           1  i_ref_clk_1           ~G_enable                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        13         7    65.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U1_ClkDiv --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clk_Divider.v
    1                                                module Clk_Divider 
    2                                                (
    3                                                    input  wire       i_ref_clk   ,  // Reference input clock
    4                                                    input  wire       i_rst_n     ,  // Active-low reset
    5                                                    input  wire       i_clk_en    ,  // Clock enable signal
    6                                                    input  wire [7:0] i_div_ratio ,  // Division ratio (N)
    7                                                    output wire       o_div_clk      // Divided clock output
    8                                                );
    9                                                
    10                                                   // Internal signals
    11                                                   reg  [7:0] counter;
    12                                                   reg        div_clk;
    13                                                   reg        CLK_FLAG; // Used instead of clock in some conditions to prevent issues in DFT
    14                                                   wire [7:0] half_period, half_period_p1;
    15                                                   wire       illegal_ratio, G_enable, ODD;
    16                                               
    17                                                   // Combinational logic
    18              1                          8         assign illegal_ratio  = (!i_div_ratio) || (i_div_ratio == 8'd1); // Illegal ratio: 0 or 1 not allowed
    19              1                          8         assign G_enable       = i_clk_en && !illegal_ratio;              // Enable only if clk_en is high & ratio legal
    20                                                   assign ODD            = i_div_ratio[0];                          // Indicator if ratio is odd
    21              1                          8         assign half_period    = i_div_ratio >> 1'b1;                     // Half-period for even division
    22              1                          9         assign half_period_p1 = half_period + 1'b1;                      // Half-period + 1 for odd division handling
    23                                               
    24                                                   // Clock divider logic + counter
    25              1                     376047         always @(posedge i_ref_clk or negedge i_rst_n) 
    26                                                   begin
    27                                                       if (!i_rst_n) 
    28                                                           begin
    29              1                          8                     div_clk  <= 1'b0;   // Reset output clock
    30              1                          8                     CLK_FLAG <= 1'b0;   // Reset flag
    31              1                          8                     counter  <= 8'd0;   // Reset counter
    32                                                           end 
    33                                                       else if (G_enable && !ODD) 
    34                                                           begin
    35                                                               // Even division
    36                                                               if (counter == half_period - 1'b1) 
    37                                                                   begin
    38              1                     277649                             div_clk <= ~div_clk; // Toggle clock
    39              1                     277649                             counter <= 8'd0;     // Reset counter
    40                                                                   end 
    41                                                               else 
    42                                                                   begin
    43              1                      98386                             counter <= counter + 1'b1; // Increment counter
    44                                                                   end
    45                                                           end 
    46                                                       else if (G_enable && ODD) 
    47                                                           begin
    48                                                               // Odd division
    49                                                               if ((counter == half_period - 1'b1) && CLK_FLAG) 
    50                                                                   begin
    51              1                    ***0***                             div_clk  <= 1'b0;            
    52              1                    ***0***                             counter  <= 8'd0;
    53              1                    ***0***                             CLK_FLAG <= ~CLK_FLAG;            
    54                                                                   end 
    55                                                               else if ((counter == half_period_p1 - 1'b1) && !CLK_FLAG) 
    56                                                                   begin
    57              1                    ***0***                             div_clk  <= 1'b1;           
    58              1                    ***0***                             counter  <= 8'd0;
    59              1                    ***0***                             CLK_FLAG <= ~CLK_FLAG;            
    60                                                                   end 
    61                                                               else 
    62                                                                   begin
    63              1                    ***0***                             counter <= counter + 1'b1; // Increment counter
    64                                                                   end
    65                                                           end 
    66                                                       else 
    67                                                           begin
    68              1                          4                     counter <= 8'd0;
    69                                                           end
    70                                                   end
    71                                               
    72                                                   // Output assignment 
    73              1                    1401074         assign o_div_clk = (G_enable) ? div_clk : i_ref_clk;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         82        30        52    36.58%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U1_ClkDiv --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                          CLK_FLAG           0           0                                0.00 
                                          G_enable           1           1                              100.00 
                                               ODD           1           1                              100.00 
                                      counter[7-1]           0           0                                0.00 
                                        counter[0]           1           1                              100.00 
                                           div_clk           1           1                              100.00 
                                  half_period[0-1]           1           1                              100.00 
                                  half_period[2-7]           0           0                                0.00 
                               half_period_p1[0-1]           1           1                              100.00 
                               half_period_p1[2-7]           0           0                                0.00 
                                          i_clk_en           0           0                                0.00 
                                  i_div_ratio[0-2]           1           1                              100.00 
                                  i_div_ratio[3-7]           0           0                                0.00 
                                         i_ref_clk           1           1                              100.00 
                                           i_rst_n           1           1                              100.00 
                                     illegal_ratio           1           1                              100.00 
                                         o_div_clk           1           1                              100.00 

Total Node Count     =         41 
Toggled Node Count   =         15 
Untoggled Node Count =         26 

Toggle Coverage      =      36.58% (30 of 82 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/TX_UNIT/parity_calc
=== Design Unit: work.UART_Parity
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         3         1    75.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/parity_calc

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_Parity.v
------------------------------------IF Branch------------------------------------
    17                                      1669     Count coming in to IF
    17              1                          4         if(!RST_n)    
    21              1                    ***0***         else if(LOAD && Data_Valid && (PAR_TYP == O_Parity))       // If data is valid and parity type is Odd
    25              1                        501         else if(LOAD && Data_Valid && (PAR_TYP == E_Parity))       // If data is valid and parity type is Even
    29              1                       1164         else 
Branch totals: 3 hits of 4 branches = 75.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         1         5    16.66%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/parity_calc --

  File UART_TX_Parity.v
----------------Focused Condition View-------------------
Line       21 Item    1  ((LOAD && Data_Valid) && PAR_TYP)
Condition totals: 0 of 3 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        LOAD         N  '_1' not hit             Hit '_1'
  Data_Valid         N  No hits                  Hit '_0' and '_1'
     PAR_TYP         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  LOAD_0                -                             
  Row   2:    ***0***  LOAD_1                (PAR_TYP && Data_Valid)       
  Row   3:    ***0***  Data_Valid_0          LOAD                          
  Row   4:    ***0***  Data_Valid_1          (PAR_TYP && LOAD)             
  Row   5:          1  PAR_TYP_0             (LOAD && Data_Valid)          
  Row   6:    ***0***  PAR_TYP_1             (LOAD && Data_Valid)          

----------------Focused Condition View-------------------
Line       25 Item    1  ((LOAD && Data_Valid) && ~PAR_TYP)
Condition totals: 1 of 3 input terms covered = 33.33%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        LOAD         Y
  Data_Valid         N  '_0' not hit             Hit '_0'
     PAR_TYP         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  LOAD_0                -                             
  Row   2:          1  LOAD_1                (~PAR_TYP && Data_Valid)      
  Row   3:    ***0***  Data_Valid_0          LOAD                          
  Row   4:          1  Data_Valid_1          (~PAR_TYP && LOAD)            
  Row   5:          1  PAR_TYP_0             (LOAD && Data_Valid)          
  Row   6:    ***0***  PAR_TYP_1             (LOAD && Data_Valid)          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         4         1    80.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/parity_calc --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_Parity.v
    1                                                module UART_Parity 
    2                                                ( 
    3                                                    input  wire       clk        ,  // System Clock 
    4                                                    input  wire       RST_n      ,  // Async Active low reset 
    5                                                    input  wire [7:0] P_DATA     ,  // 8-bit parallel input data
    6                                                    input  wire       LOAD       ,  // LOAD signal from FSM to avoid glitches on Valid signal 
    7                                                    input  wire       Data_Valid ,  // Indicates when the input data is valid
    8                                                    input  wire       PAR_TYP    ,  // Parity type: 1 for Odd, 0 for Even
    9                                                    output reg        Par_bit       // Output parity bit
    10                                               );
    11                                               
    12                                               localparam O_Parity = 1'b1 ;  // Define constant for Odd Parity
    13                                               localparam E_Parity = 1'b0 ;  // Define constant for Even Parity
    14                                               
    15              1                       1669     always @(posedge clk or negedge RST_n) 
    16                                               begin
    17                                                   if(!RST_n)    
    18                                                       begin
    19              1                          4                 Par_bit <= 1'b0 ;                 
    20                                                       end    
    21                                                   else if(LOAD && Data_Valid && (PAR_TYP == O_Parity))       // If data is valid and parity type is Odd
    22                                                       begin
    23              1                    ***0***                 Par_bit <= ~^(P_DATA);                 
    24                                                       end    
    25                                                   else if(LOAD && Data_Valid && (PAR_TYP == E_Parity))       // If data is valid and parity type is Even
    26                                                       begin
    27              1                        501                 Par_bit <= ^(P_DATA);                  
    28                                                       end  
    29                                                   else 
    30                                                       begin
    31              1                       1164                 Par_bit <= Par_bit ; // store the parity                  

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         28        27         1    96.42%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/parity_calc --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                        Data_Valid           1           1                              100.00 
                                              LOAD           1           1                              100.00 
                                           PAR_TYP           0           1                               50.00 
                                       P_DATA[0-7]           1           1                              100.00 
                                           Par_bit           1           1                              100.00 
                                             RST_n           1           1                              100.00 
                                               clk           1           1                              100.00 

Total Node Count     =         14 
Toggled Node Count   =         13 
Untoggled Node Count =          1 

Toggle Coverage      =      96.42% (27 of 28 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM
=== Design Unit: work.UART_FSM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        21        18         3    85.71%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_FSM.v
------------------------------------IF Branch------------------------------------
    34                                      3278     Count coming in to IF
    34              1                          4         if(!RST_n)
    38              1                       3274         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    49                                      3547     Count coming in to CASE
    50              1                        772             UART_IDLE : 
    61              1                        501             UART_START : 
    65              1                       1272             UART_DATA : 
    80              1                        501             UART_PAR : 
    84              1                        501             UART_STOP : 
    88              1                    ***0***             default: Next_state = UART_IDLE ;                 // Default to Idle state
Branch totals: 5 hits of 6 branches = 83.33%

------------------------------------IF Branch------------------------------------
    52                                       772     Count coming in to IF
    52              1                        501                             if (Data_Valid)                  // Triggered by Data_Valid
    56              1                        271                             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    67                                      1272     Count coming in to IF
    67              1                        501                             if(ser_done && PAR_EN)            // Data done and parity enabled
    71              1                    ***0***                             else if(ser_done && !PAR_EN)      // Data done without parity
    75              1                        771                             else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------CASE Branch------------------------------------
    101                                     3567     Count coming in to CASE
    102             1                        772             UART_IDLE : begin
    110             1                        501             UART_START : begin
    115             1                       1292             UART_DATA : begin
    120             1                        501             UART_PAR : begin
    125             1                        501             UART_STOP : begin
    130             1                    ***0***             default   : begin
Branch totals: 5 hits of 6 branches = 83.33%

------------------------------------IF Branch------------------------------------
    105                                      772     Count coming in to IF
    105             1                        501                             if (Data_Valid && !busy)
    107             1                        271                             else     
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         2         4    33.33%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM --

  File UART_TX_FSM.v
----------------Focused Condition View-------------------
Line       67 Item    1  (ser_done && PAR_EN)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    ser_done         Y
      PAR_EN         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  ser_done_0            -                             
  Row   2:          1  ser_done_1            PAR_EN                        
  Row   3:    ***0***  PAR_EN_0              ser_done                      
  Row   4:          1  PAR_EN_1              ser_done                      

----------------Focused Condition View-------------------
Line       71 Item    1  (ser_done && ~PAR_EN)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    ser_done         N  '_1' not hit             Hit '_1'
      PAR_EN         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  ser_done_0            -                             
  Row   2:    ***0***  ser_done_1            ~PAR_EN                       
  Row   3:    ***0***  PAR_EN_0              ser_done                      
  Row   4:    ***0***  PAR_EN_1              ser_done                      

----------------Focused Condition View-------------------
Line       105 Item    1  (Data_Valid && ~busy)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  Data_Valid         Y
        busy         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  Data_Valid_0          -                             
  Row   2:          1  Data_Valid_1          ~busy                         
  Row   3:          1  busy_0                Data_Valid                    
  Row   4:    ***0***  busy_1                Data_Valid                    


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       5         5         0   100.00%
    FSM Transitions                  9         5         4    55.55%

================================FSM Details================================

FSM Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM --

FSM_ID: Current_state
    Current State Object : Current_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  50           UART_IDLE                   0
  61          UART_START                   1
  65           UART_DATA                   3
  84           UART_STOP                   6
  80            UART_PAR                   2
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
               UART_IDLE                 773          
              UART_START                 501          
               UART_DATA                1002          
               UART_STOP                 501          
                UART_PAR                 501          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  54                   0                 501          UART_IDLE -> UART_START          
  63                   1                 501          UART_START -> UART_DATA          
  69                   4                 501          UART_DATA -> UART_PAR          
  86                   6                 501          UART_STOP -> UART_IDLE          
  82                   7                 501          UART_PAR -> UART_STOP          
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  36                   2          UART_START -> UART_IDLE
  73                   3          UART_DATA -> UART_STOP
  36                   5          UART_DATA -> UART_IDLE
  36                   8          UART_PAR -> UART_IDLE


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   5         5         0   100.00%
        FSM Transitions              9         5         4    55.55%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      37        32         5    86.48%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_FSM.v
    1                                                module UART_FSM  
    2                                                (
    3                                                    input  wire       clk        ,  // System clock
    4                                                    input  wire       RST_n      ,  // Asynchronous active-low reset
    5                                                    input  wire       ser_done   ,  // Serialization done flag
    6                                                    input  wire       par_bit    ,  // Parity bit from parity generator
    7                                                    input  wire       ser_data   ,  // Serial data from serializer
    8                                                    input  wire       Data_Valid ,  // Input data valid signal
    9                                                    input  wire       PAR_EN     ,  // Parity enable signal
    10                                                   output reg        ser_en     ,  // Serializer enable signal
    11                                                   output reg        Load       ,  // Load signal for registering the data
    12                                                   output reg        TX_OUT     ,  // Serial data output
    13                                                   output wire       busy          // Busy status flag
    14                                               );
    15                                               
    16                                               // UART frame control bits
    17                                               localparam Start_bit = 1'b0 ;  // Start bit is always 0
    18                                               localparam End_bit   = 1'b1 ;  // Stop bit (idle line) is always 1
    19                                               
    20                                               // Gray-encoded FSM states
    21                                               localparam UART_IDLE  = 3'b000 ;  // Idle state, waiting for data
    22                                               localparam UART_START = 3'b001 ;  // Start bit transmission
    23                                               localparam UART_DATA  = 3'b011 ;  // Transmitting data bits
    24                                               localparam UART_PAR   = 3'b010 ;  // Parity bit transmission
    25                                               localparam UART_STOP  = 3'b110 ;  // Stop bit transmission
    26                                               
    27                                               reg [2:0] Current_state , Next_state ; // FSM current and next state
    28                                               
    29                                               // ---------------------------
    30                                               // State register (state memory)
    31                                               // ---------------------------
    32              1                       3278     always @(posedge clk or negedge RST_n) 
    33                                               begin
    34                                                   if(!RST_n)
    35                                                       begin
    36              1                          4                 Current_state <= UART_IDLE ;  // Reset to IDLE state
    37                                                       end    
    38                                                   else 
    39                                                       begin
    40              1                       3274                 Current_state <= Next_state ; // Transition to next state
    41                                                       end    
    42                                               end
    43                                               
    44                                               // ---------------------------
    45                                               // Next-state logic
    46                                               // ---------------------------
    47              1                       3547     always @(*) 
    48                                               begin
    49                                                   case (Current_state)        
    50                                                       UART_IDLE : 
    51                                                                   begin
    52                                                                       if (Data_Valid)                  // Triggered by Data_Valid
    53                                                                           begin
    54              1                        501                                     Next_state = UART_START ; // Move to Start state
    55                                                                           end
    56                                                                       else
    57                                                                           begin
    58              1                        271                                     Next_state = UART_IDLE ;  // Remain in Idle
    59                                                                           end
    60                                                                   end
    61                                                       UART_START : 
    62                                                                   begin
    63              1                        501                             Next_state = UART_DATA ;          // Move to Data state
    64                                                                   end
    65                                                       UART_DATA : 
    66                                                                   begin
    67                                                                       if(ser_done && PAR_EN)            // Data done and parity enabled
    68                                                                           begin
    69              1                        501                                     Next_state = UART_PAR ;   // Move to Parity state
    70                                                                           end
    71                                                                       else if(ser_done && !PAR_EN)      // Data done without parity
    72                                                                           begin
    73              1                    ***0***                                     Next_state = UART_STOP ;  // Move directly to Stop state
    74                                                                           end
    75                                                                       else
    76                                                                           begin
    77              1                        771                                     Next_state = UART_DATA ;  // Stay in Data state
    78                                                                           end
    79                                                                   end
    80                                                       UART_PAR : 
    81                                                                   begin
    82              1                        501                             Next_state = UART_STOP ;          // Move to Stop state after parity
    83                                                                   end
    84                                                       UART_STOP : 
    85                                                                   begin
    86              1                        501                             Next_state = UART_IDLE ;          // Return to Idle after stop
    87                                                                   end
    88              1                    ***0***             default: Next_state = UART_IDLE ;                 // Default to Idle state
    89                                                   endcase    
    90                                               end
    91                                               
    92                                               // ---------------------------
    93                                               // Output logic (Moore-style FSM)
    94                                               // ---------------------------
    95              1                       3567     always @(*) 
    96                                               begin
    97              1                       3567         ser_en = 1'b0    ; // Default: serializer disabled
    98              1                       3567         Load   = 1'b0    ; // Default: Load disabled
    99              1                       3567         TX_OUT = End_bit ; // Default: TX line is high (idle)
    100                                                  
    101                                                  case (Current_state)
    102                                                      UART_IDLE : begin
    103             1                        772                             TX_OUT = End_bit ;              // Line idle
    104             1                        772                             ser_en = 1'b0 ;                 // Serializer disabled
    105                                                                      if (Data_Valid && !busy)
    106             1                        501                                 Load = 1'b1 ;               // Enable serializer to Load the parallel data
    107                                                                      else     
    108             1                        271                                 Load = 1'b0 ;               // Disable serializer Loading
    109                                                                  end
    110                                                      UART_START : begin
    111             1                        501                             TX_OUT = Start_bit ;            // Send start bit
    112             1                        501                             ser_en = 1'b1      ;            // Serializer enabled during start **********************
    113             1                        501                             Load   = 1'b0      ;            // Disable serializer Loading
    114                                                                  end
    115                                                      UART_DATA : begin
    116             1                       1292                             Load   = 1'b0     ;             // Disable serializer Loading
    117             1                       1292                             ser_en = 1'b1     ;             // Enable the serial Data
    118             1                       1292                             TX_OUT = ser_data ;             // Send serial data bit
    119                                                                  end
    120                                                      UART_PAR : begin
    121             1                        501                             Load   = 1'b0    ;              // Disable serializer Loading
    122             1                        501                             ser_en = 1'b0    ;              // Serializer disabled
    123             1                        501                             TX_OUT = par_bit ;              // Send parity bit
    124                                                                  end
    125                                                      UART_STOP : begin
    126             1                        501                             Load   = 1'b0    ;              // Disable serializer Loading
    127             1                        501                             ser_en = 1'b0    ;              // Serializer disabled
    128             1                        501                             TX_OUT = End_bit ;              // Send stop bit
    129                                                                  end
    130                                                      default   : begin
    131             1                    ***0***                             ser_en = 1'b0    ;              // Serializer disabled
    132             1                    ***0***                             Load   = 1'b0    ;              // Disable serializer Loading
    133             1                    ***0***                             TX_OUT = End_bit ;              // Default to idle line
    134                                                                  end 
    135                                                  endcase
    136                                              end
    137                                              
    138             1                       2507     assign busy = (Current_state == UART_IDLE)? 1'b0 : 1'b1 ; // Busy when not in IDLE

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         34        32         2    94.11%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/FSM --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                Current_state[2-0]           1           1                              100.00 
                                        Data_Valid           1           1                              100.00 
                                              Load           1           1                              100.00 
                                   Next_state[2-0]           1           1                              100.00 
                                            PAR_EN           0           0                                0.00 
                                             RST_n           1           1                              100.00 
                                            TX_OUT           1           1                              100.00 
                                              busy           1           1                              100.00 
                                               clk           1           1                              100.00 
                                           par_bit           1           1                              100.00 
                                          ser_data           1           1                              100.00 
                                          ser_done           1           1                              100.00 
                                            ser_en           1           1                              100.00 

Total Node Count     =         17 
Toggled Node Count   =         16 
Untoggled Node Count =          1 

Toggle Coverage      =      94.11% (32 of 34 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/TX_UNIT/SER
=== Design Unit: work.UART_Serializer
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10        10         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/SER

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_Serializer.v
------------------------------------IF Branch------------------------------------
    20                                      6247     Count coming in to IF
    20              1                          4         if(!RST_n)
    25              1                        501         else if (Load) 
    29              1                       4509         else if (ser_en)
                                            1233     All False Count
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    38                                      1511     Count coming in to IF
    38              1                          4         if(!RST_n)
    42              1                        501         else if(counter_max)
    46              1                       1006         else            
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                     17557     Count coming in to IF
    55              1                          4         if(!RST_n)
    59              1                       4008         else if(ser_en && !counter_max)
    63              1                      13545         else            
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/SER --

  File UART_TX_Serializer.v
----------------Focused Condition View-------------------
Line       59 Item    1  (ser_en && ~counter_max)
Condition totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
       ser_en         Y
  counter_max         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  ser_en_0              -                             
  Row   2:          1  ser_en_1              ~counter_max                  
  Row   3:          1  counter_max_0         ser_en                        
  Row   4:          1  counter_max_1         ser_en                        


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         1         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/SER --

  File UART_TX_Serializer.v
----------------Focused Expression View-----------------
Line       69 Item    1  (counter == 7)
Expression totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        14         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/SER --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_TX_Serializer.v
    1                                                module UART_Serializer 
    2                                                (
    3                                                    input  wire       clk      ,  // System clock
    4                                                    input  wire       RST_n    ,  // Async Active-low reset
    5                                                    input  wire [7:0] P_DATA   ,  // Parallel data input
    6                                                    input  wire       ser_en   ,  // Serialization enable signal
    7                                                    input  wire       Load     ,  // Load signal for registering the data
    8                                                    output reg        ser_done ,  // Serialization done flag
    9                                                    output reg        ser_data    // Serial output bit
    10                                               );
    11                                               
    12                                               reg [7:0] P_DATA_reg   ;  // Register to hold parallel data
    13                                               reg [2:0] counter      ;  // 3-bit counter for bit indexing
    14                                               wire      counter_max  ;  // Flag to indicate counter reached max (7)
    15                                               
    16                                               
    17                                               // Data register loading and serial output logic
    18              1                       6247     always @(posedge clk or negedge RST_n) 
    19                                               begin
    20                                                   if(!RST_n)
    21                                                       begin
    22              1                          4                 P_DATA_reg <= 8'b0;     // Clear data register on reset
    23              1                          4                 ser_data   <= 1'b0;     // Clear serial output on reset
    24                                                       end    
    25                                                   else if (Load) 
    26                                                       begin
    27              1                        501                 P_DATA_reg   <= P_DATA ;  // Load parallel data on enable
    28                                                       end
    29                                                   else if (ser_en)
    30                                                       begin
    31              1                       4509                 ser_data <= P_DATA_reg[counter];  // Output the bit indexed by counter
    32                                                       end    
    33                                               end
    34                                               
    35                                               // Serialization done flag generation logic
    36              1                       1511     always @(posedge clk or negedge RST_n) 
    37                                               begin
    38                                                   if(!RST_n)
    39                                                       begin
    40              1                          4                 ser_done <= 1'b0;      // Clear done flag on reset or new enable
    41                                                       end
    42                                                   else if(counter_max)
    43                                                       begin
    44              1                        501                 ser_done <= 1'b1;      // Set done flag when last bit is reached
    45                                                       end 
    46                                                   else            
    47                                                       begin
    48              1                       1006                 ser_done <= 1'b0;      // Reset done flag when counter is not max
    49                                                       end 
    50                                               end
    51                                               
    52                                               // Counter logic for serialization
    53              1                      17557     always @(posedge clk or negedge RST_n) 
    54                                               begin
    55                                                   if(!RST_n)
    56                                                       begin
    57              1                          4                 counter <= 3'b0;           // Reset counter on reset or new enable
    58                                                       end
    59                                                   else if(ser_en && !counter_max)
    60                                                       begin
    61              1                       4008                 counter <= counter + 1'b1 ; // Increment counter until max is reached
    62                                                       end
    63                                                   else            
    64                                                       begin
    65              1                      13545                 counter <= 3'b0;           // Reset counter on reset or new enable
    66                                                       end
    67                                               end
    68                                               
    69              1                       5012     assign counter_max = (counter == 3'b111) ; // Assert when counter reaches last bit

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         52        52         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT/SER --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                              Load           1           1                              100.00 
                                       P_DATA[0-7]           1           1                              100.00 
                                   P_DATA_reg[7-0]           1           1                              100.00 
                                             RST_n           1           1                              100.00 
                                               clk           1           1                              100.00 
                                      counter[2-0]           1           1                              100.00 
                                       counter_max           1           1                              100.00 
                                          ser_data           1           1                              100.00 
                                          ser_done           1           1                              100.00 
                                            ser_en           1           1                              100.00 

Total Node Count     =         26 
Toggled Node Count   =         26 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (52 of 52 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/TX_UNIT
=== Design Unit: work.UART_TX_Top
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         40        37         3    92.50%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/TX_UNIT --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                        Data_Valid           1           1                              100.00 
                                            PAR_EN           0           0                                0.00 
                                           PAR_TYP           0           1                               50.00 
                                       P_DATA[0-7]           1           1                              100.00 
                                               RST           1           1                              100.00 
                                            TX_OUT           1           1                              100.00 
                                              busy           1           1                              100.00 
                                               clk           1           1                              100.00 
                                         load_data           1           1                              100.00 
                                            parity           1           1                              100.00 
                                       serial_data           1           1                              100.00 
                                       serial_done           1           1                              100.00 
                                     serializer_en           1           1                              100.00 

Total Node Count     =         20 
Toggled Node Count   =         18 
Untoggled Node Count =          2 

Toggle Coverage      =      92.50% (37 of 40 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial
=== Design Unit: work.UART_RX_deserializer
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10        10         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_deserializer.v
------------------------------------IF Branch------------------------------------
    20                                      5182     Count coming in to IF
    20              1                          8             if(!rst_n) 
    24              1                        939             else if (counter_max)
                                            4235     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    33                                     21433     Count coming in to IF
    33              1                          8             if(!rst_n) 
    37              1                       7514             else if(enable)
                                           13911     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    46                                     15978     Count coming in to IF
    46              1                          8             if(!rst_n)
    50              1                       7514             else if (enable && !counter_max) 
    54              1                        939             else if (counter_max)
                                            7517     All False Count
Branch totals: 4 hits of 4 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         1         1    50.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial --

  File UART_RX_deserializer.v
----------------Focused Condition View-------------------
Line       50 Item    1  (enable && ~counter_max)
Condition totals: 1 of 2 input terms covered = 50.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
       enable         Y
  counter_max         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  enable_0              -                             
  Row   2:          1  enable_1              ~counter_max                  
  Row   3:          1  counter_max_0         enable                        
  Row   4:    ***0***  counter_max_1         enable                        


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         1         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial --

  File UART_RX_deserializer.v
----------------Focused Expression View-----------------
Line       15 Item    1  (counter == 8)
Expression totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 8)_0      -                             
  Row   2:          1  (counter == 8)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11        11         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_deserializer.v
    1                                                module UART_RX_deserializer  
    2                                                (
    3                                                    input wire       clk         , // system clock
    4                                                    input wire       rst_n       , // active-low reset
    5                                                    input wire       enable      , // enable signal for deserialization
    6                                                    input wire       serial_data , // incoming serial data
    7                                                    output reg [7:0] P_DATA        // parallel data output
    8                                                );
    9                                                
    10                                                   reg [7:0] P_DATA_reg ; // temporary register to store incoming serial bits
    11                                                   reg [3:0] counter ;    // counter to track bit position
    12                                                   wire      counter_max ; 
    13                                               
    14                                                   // flag indicating when counter reached maximum 
    15              1                       8455         assign counter_max = (counter == 4'd8) ;
    16                                               
    17                                                   // latch the parallel data output when the counter reaches max
    18              1                       5182         always @(posedge clk or negedge rst_n) 
    19                                                   begin
    20                                                       if(!rst_n) 
    21                                                           begin
    22              1                          8                     P_DATA <= 8'd0 ; // reset output
    23                                                           end    
    24                                                       else if (counter_max)
    25                                                           begin
    26              1                        939                     P_DATA <= P_DATA_reg ; // store fully received byte
    27                                                           end    
    28                                                   end
    29                                               
    30                                                   // shift in serial data into P_DATA_reg at the position indicated by counter
    31              1                      21433         always @(posedge clk or negedge rst_n) 
    32                                                   begin
    33                                                       if(!rst_n) 
    34                                                           begin
    35              1                          8                     P_DATA_reg <= 8'd0 ; // reset temp register
    36                                                           end    
    37                                                       else if(enable)
    38                                                           begin
    39              1                       7514                     P_DATA_reg[counter] <= serial_data ; // store incoming bit
    40                                                           end    
    41                                                   end
    42                                               
    43                                                   // 3-bit counter to track number of received bits
    44              1                      15978         always @(posedge clk or negedge rst_n) 
    45                                                   begin
    46                                                       if(!rst_n)
    47                                                           begin
    48              1                          8                     counter <= 4'd0 ; // reset counter
    49                                                           end
    50                                                       else if (enable && !counter_max) 
    51                                                           begin
    52              1                       7514                     counter <= counter + 1'b1 ; // increment counter
    53                                                           end    
    54                                                       else if (counter_max)
    55                                                           begin
    56              1                        939                     counter <= 4'd0 ; // reset counter when not enabled or max reached

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        50         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_desrial --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                       P_DATA[7-0]           1           1                              100.00 
                                   P_DATA_reg[7-0]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                      counter[3-0]           1           1                              100.00 
                                       counter_max           1           1                              100.00 
                                            enable           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                       serial_data           1           1                              100.00 

Total Node Count     =         25 
Toggled Node Count   =         25 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (50 of 50 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter
=== Design Unit: work.UART_RX_edge_counter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         9         8         1    88.88%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_edge_counter.v
------------------------------------IF Branch------------------------------------
    20                                    324504     Count coming in to IF
    20              1                         15         if(!rst_n)
    24              1                     178892         else if (enable && !max_edge) // enable = 1 during the counter operation*******************
    28              1                     145597         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    36                                     10333     Count coming in to IF
    36              1                      10333     assign max_bits = (PAR_EN) ? (bit_cnt == 4'd10) : (bit_cnt == 4'd9) ;
    36              2                    ***0***     assign max_bits = (PAR_EN) ? (bit_cnt == 4'd10) : (bit_cnt == 4'd9) ;
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    41                                     22550     Count coming in to IF
    41              1                          8         if(!rst_n)
    45              1                       9393         else if( enable && max_edge && !max_bits)
    49              1                       2817         else if(max_bits || !enable) //****************************************************************
                                           10332     All False Count
Branch totals: 4 hits of 4 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       7         6         1    85.71%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter --

  File UART_RX_edge_counter.v
----------------Focused Condition View-------------------
Line       24 Item    1  (enable && ~max_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      enable         Y
    max_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  enable_0              -                             
  Row   2:          1  enable_1              ~max_edge                     
  Row   3:          1  max_edge_0            enable                        
  Row   4:          1  max_edge_1            enable                        

----------------Focused Condition View-------------------
Line       45 Item    1  ((enable && max_edge) && ~max_bits)
Condition totals: 2 of 3 input terms covered = 66.66%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      enable         Y
    max_edge         Y
    max_bits         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  enable_0              -                             
  Row   2:          1  enable_1              (~max_bits && max_edge)       
  Row   3:          1  max_edge_0            enable                        
  Row   4:          1  max_edge_1            (~max_bits && enable)         
  Row   5:          1  max_bits_0            (enable && max_edge)          
  Row   6:    ***0***  max_bits_1            (enable && max_edge)          

----------------Focused Condition View-------------------
Line       49 Item    1  (max_bits || ~enable)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    max_bits         Y
      enable         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  max_bits_0            enable                        
  Row   2:          1  max_bits_1            -                             
  Row   3:          1  enable_0              ~max_bits                     
  Row   4:          1  enable_1              ~max_bits                     


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      4         2         2    50.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter --

  File UART_RX_edge_counter.v
----------------Focused Expression View-----------------
Line       14 Item    1  (edge_cnt == (Prescale - 1'b1))
Expression totals: 1 of 1 input term covered = 100.00%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
  (edge_cnt == (Prescale - 1'b1))         Y

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:          1  (edge_cnt == (Prescale - 1'b1))_0  -                             
  Row   2:          1  (edge_cnt == (Prescale - 1'b1))_1  -                             

-----------Focused Expression View (Bimodal)------------
Line       36 Item    1  (PAR_EN? (bit_cnt == 10): (bit_cnt == 9))
Expression totals: 1 of 3 input terms covered = 33.33%

         Input Term   Covered  Reason for no coverage                  Hint
        -----------  --------  --------------------------------------  --------------
             PAR_EN         N  '_1' hit but '_0' not hit              Hit '_0' for output ->0 or ->1
    (bit_cnt == 10)         Y
     (bit_cnt == 9)         N  No hits                                Hit '_0' and '_1' for different outputs

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           0  PAR_EN_0              -                                  
 Row   2:           1           1  PAR_EN_1              -                                  
 Row   3:           1           0  (bit_cnt == 10)_0     PAR_EN                             
 Row   4:           0           1  (bit_cnt == 10)_1     PAR_EN                             
 Row   5:           0           0  (bit_cnt == 9)_0      ~PAR_EN                            
 Row   6:           0           0  (bit_cnt == 9)_1      ~PAR_EN                            


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_edge_counter.v
    1                                                module UART_RX_edge_counter 
    2                                                (
    3                                                    input wire       clk      , // System clock
    4                                                    input wire       rst_n    , // Active-low reset
    5                                                    input wire       enable   , // enable signal for counting edges
    6                                                    input wire       PAR_EN   , // Parity enable
    7                                                    input wire [5:0] Prescale , // Prescaler value to determine number of clock edges per bit
    8                                                    output reg [4:0] edge_cnt , // Counter for edges within one bit period
    9                                                    output reg [3:0] bit_cnt    // Counter for number of bits received
    10                                               );
    11                                                   
    12                                               // Signal indicating edge_cnt has reached its maximum (Prescale-1)
    13                                               wire max_edge; 
    14              1                     189232     assign max_edge = (edge_cnt == (Prescale - 1'b1));
    15                                               
    16                                               
    17                                               // Edge counter: counts clock edges when enable is high
    18              1                     324504     always @(posedge clk or negedge rst_n) 
    19                                               begin
    20                                                   if(!rst_n)
    21                                                       begin
    22              1                         15                 edge_cnt <= 5'd0 ; // Reset edge counter to 0
    23                                                       end    
    24                                                   else if (enable && !max_edge) // enable = 1 during the counter operation*******************
    25                                                       begin
    26              1                     178892                 edge_cnt <= edge_cnt + 1'b1 ; // Increment edge counter
    27                                                       end
    28                                                   else
    29                                                       begin
    30              1                     145597                 edge_cnt <= 5'd0 ; // Reset edge counter when max_edge reached or enable is low
    31                                                       end    
    32                                               end
    33                                               
    34                                               // Signal indicating bit_cnt has reached its maximum (9 bits)
    35                                               wire max_bits; 
    36              1                      10335     assign max_bits = (PAR_EN) ? (bit_cnt == 4'd10) : (bit_cnt == 4'd9) ;
    37                                               
    38                                               // Bit counter: increments whenever edge counter reaches max_edge
    39              1                      22550     always @(posedge clk or negedge rst_n) 
    40                                               begin
    41                                                   if(!rst_n)
    42                                                       begin
    43              1                          8                 bit_cnt  <= 4'd0 ; // Reset bit counter
    44                                                       end    
    45                                                   else if( enable && max_edge && !max_bits)
    46                                                       begin
    47              1                       9393                 bit_cnt <= bit_cnt + 1'b1 ; // Increment bit counter at the end of a bit period
    48                                                       end
    49                                                   else if(max_bits || !enable) //****************************************************************
    50                                                       begin
    51              1                       2817                 bit_cnt  <= 4'd0 ; // Reset bit counter in case of reaching 9-bits

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         42        34         8    80.95%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_edge_counter --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            PAR_EN           0           0                                0.00 
                                     Prescale[0-2]           0           0                                0.00 
                                     Prescale[3-5]           1           1                              100.00 
                                      bit_cnt[3-0]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                     edge_cnt[4-0]           1           1                              100.00 
                                            enable           1           1                              100.00 
                                          max_bits           1           1                              100.00 
                                          max_edge           1           1                              100.00 
                                             rst_n           1           1                              100.00 

Total Node Count     =         21 
Toggled Node Count   =         17 
Untoggled Node Count =          4 

Toggle Coverage      =      80.95% (34 of 42 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler
=== Design Unit: work.UART_RX_sampler
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         9         9         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_sampler.v
------------------------------------IF Branch------------------------------------
    38                                     43219     Count coming in to IF
    38              1                          8             if (!rst_n) 
    41              1                      20664             else if (sample_en && sample_hit && !max_value) 
    44              1                      10332             else if (max_value)
                                           12215     All False Count
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    53                                     48678     Count coming in to IF
    53              1                          8             if (!rst_n) 
    59              1                      30996             else if (sample_en && sample_hit) 
                                           17674     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    61                                     30996     Count coming in to IF
    61              1                      20664                     if(counter != 2)
    65              1                      10332                     else // Decide final bit
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler --

  File UART_RX_sampler.v
----------------Focused Condition View-------------------
Line       41 Item    1  ((sample_en && sample_hit) && ~max_value)
Condition totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   sample_en         Y
  sample_hit         Y
   max_value         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  sample_en_0           -                             
  Row   2:          1  sample_en_1           (~max_value && sample_hit)    
  Row   3:          1  sample_hit_0          sample_en                     
  Row   4:          1  sample_hit_1          (~max_value && sample_en)     
  Row   5:          1  max_value_0           (sample_en && sample_hit)     
  Row   6:          1  max_value_1           (sample_en && sample_hit)     

----------------Focused Condition View-------------------
Line       59 Item    1  (sample_en && sample_hit)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   sample_en         Y
  sample_hit         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  sample_en_0           -                             
  Row   2:          1  sample_en_1           sample_hit                    
  Row   3:          1  sample_hit_0          sample_en                     
  Row   4:          1  sample_hit_1          sample_en                     

----------------Focused Condition View-------------------
Line       61 Item    1  (counter != 2)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter != 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter != 2)_0      -                             
  Row   2:          1  (counter != 2)_1      -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     19        16         3    84.21%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler --

  File UART_RX_sampler.v
----------------Focused Expression View-----------------
Line       20 Item    1  ((Prescale == 8) && (((edge_count == 2) || (edge_count == 3)) || (edge_count == 4)))
Expression totals: 4 of 4 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
    (Prescale == 8)         Y
  (edge_count == 2)         Y
  (edge_count == 3)         Y
  (edge_count == 4)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (Prescale == 8)_0     -                             
  Row   2:          1  (Prescale == 8)_1     (((edge_count == 2) || (edge_count == 3)) || (edge_count == 4))
  Row   3:          1  (edge_count == 2)_0   ((Prescale == 8) && ~(edge_count == 4) && ~(edge_count == 3))
  Row   4:          1  (edge_count == 2)_1   (Prescale == 8)               
  Row   5:          1  (edge_count == 3)_0   ((Prescale == 8) && ~(edge_count == 4) && ~(edge_count == 2))
  Row   6:          1  (edge_count == 3)_1   ((Prescale == 8) && ~(edge_count == 2))
  Row   7:          1  (edge_count == 4)_0   ((Prescale == 8) && ~((edge_count == 2) || (edge_count == 3)))
  Row   8:          1  (edge_count == 4)_1   ((Prescale == 8) && ~((edge_count == 2) || (edge_count == 3)))

----------------Focused Expression View-----------------
Line       23 Item    1  ((Prescale == 16) && (((edge_count == 6) || (edge_count == 7)) || (edge_count == 8)))
Expression totals: 4 of 4 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
   (Prescale == 16)         Y
  (edge_count == 6)         Y
  (edge_count == 7)         Y
  (edge_count == 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (Prescale == 16)_0    -                             
  Row   2:          1  (Prescale == 16)_1    (((edge_count == 6) || (edge_count == 7)) || (edge_count == 8))
  Row   3:          1  (edge_count == 6)_0   ((Prescale == 16) && ~(edge_count == 8) && ~(edge_count == 7))
  Row   4:          1  (edge_count == 6)_1   (Prescale == 16)              
  Row   5:          1  (edge_count == 7)_0   ((Prescale == 16) && ~(edge_count == 8) && ~(edge_count == 6))
  Row   6:          1  (edge_count == 7)_1   ((Prescale == 16) && ~(edge_count == 6))
  Row   7:          1  (edge_count == 8)_0   ((Prescale == 16) && ~((edge_count == 6) || (edge_count == 7)))
  Row   8:          1  (edge_count == 8)_1   ((Prescale == 16) && ~((edge_count == 6) || (edge_count == 7)))

----------------Focused Expression View-----------------
Line       26 Item    1  ((Prescale == 32) && (((edge_count == 14) || (edge_count == 15)) || (edge_count == 16)))
Expression totals: 4 of 4 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
    (Prescale == 32)         Y
  (edge_count == 14)         Y
  (edge_count == 15)         Y
  (edge_count == 16)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (Prescale == 32)_0    -                             
  Row   2:          1  (Prescale == 32)_1    (((edge_count == 14) || (edge_count == 15)) || (edge_count == 16))
  Row   3:          1  (edge_count == 14)_0  ((Prescale == 32) && ~(edge_count == 16) && ~(edge_count == 15))
  Row   4:          1  (edge_count == 14)_1  (Prescale == 32)              
  Row   5:          1  (edge_count == 15)_0  ((Prescale == 32) && ~(edge_count == 16) && ~(edge_count == 14))
  Row   6:          1  (edge_count == 15)_1  ((Prescale == 32) && ~(edge_count == 14))
  Row   7:          1  (edge_count == 16)_0  ((Prescale == 32) && ~((edge_count == 14) || (edge_count == 15)))
  Row   8:          1  (edge_count == 16)_1  ((Prescale == 32) && ~((edge_count == 14) || (edge_count == 15)))

----------------Focused Expression View-----------------
Line       29 Item    1  ((sample_ps8 || sample_ps16) || sample_ps32)
Expression totals: 3 of 3 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
   sample_ps8         Y
  sample_ps16         Y
  sample_ps32         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  sample_ps8_0          (~sample_ps32 && ~sample_ps16)
  Row   2:          1  sample_ps8_1          -                             
  Row   3:          1  sample_ps16_0         (~sample_ps32 && ~sample_ps8) 
  Row   4:          1  sample_ps16_1         ~sample_ps8                   
  Row   5:          1  sample_ps32_0         ~(sample_ps8 || sample_ps16)  
  Row   6:          1  sample_ps32_1         ~(sample_ps8 || sample_ps16)  

----------------Focused Expression View-----------------
Line       35 Item    1  (counter == 2)
Expression totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 2)_0      -                             
  Row   2:          1  (counter == 2)_1      -                             

----------------Focused Expression View-----------------
Line       78 Item    1  (((data[2] & data[1]) | (data[2] & data[0])) | (data[1] & data[0]))
Expression totals: 0 of 3 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
     data[2]         N  No hits                  Hit '_0' and '_1'
     data[1]         N  No hits                  Hit '_0' and '_1'
     data[0]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  data[2]_0             (~(data[1] & data[0]) && data[1]), (~(data[1] & data[0]) && data[0])
  Row   2:    ***0***  data[2]_1             (~(data[1] & data[0]) && ~(data[2] & data[0]) && data[1]), (~(data[1] & data[0]) && ~(data[2] & data[1]) && data[0])
  Row   3:    ***0***  data[1]_0             (~(data[2] & data[0]) && data[2]), (~((data[2] & data[1]) | (data[2] & data[0])) && data[0])
  Row   4:    ***0***  data[1]_1             (~(data[1] & data[0]) && ~(data[2] & data[0]) && data[2]), (~((data[2] & data[1]) | (data[2] & data[0])) && data[0])
  Row   5:    ***0***  data[0]_0             (~(data[2] & data[1]) && data[2]), (~((data[2] & data[1]) | (data[2] & data[0])) && data[1])
  Row   6:    ***0***  data[0]_1             (~(data[1] & data[0]) && ~(data[2] & data[1]) && data[2]), (~((data[2] & data[1]) | (data[2] & data[0])) && data[1])


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        15         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_sampler.v
    1                                                module UART_RX_sampler 
    2                                                (
    3                                                    input  wire       clk         , // System clock
    4                                                    input  wire       rst_n       , // Active-low reset
    5                                                    input  wire       RX_IN       , // Incoming RX signal
    6                                                    input  wire       sample_en   , // Sampling enable
    7                                                    input  wire [5:0] Prescale    , // Baud rate Prescaler value
    8                                                    input  wire [4:0] edge_count  , // Current edge count within bit period
    9                                                    output reg        sampled_bit   // Final sampled bit after processing
    10                                               );
    11                                                   // Registers for storing 3 samples per bit and a small counter for indexing them
    12                                                   reg [1:0] sampled_data ; 
    13                                                   reg [1:0] counter      ;    
    14                                               
    15                                                   // Individual "sample hit" flags for each Prescale option
    16                                                   wire sample_ps8, sample_ps16 , 
    17                                                        sample_ps32, sample_hit ;
    18                                               
    19                                                   // Sampling condition for Prescale = 8 → valid at edges 2,3,4 not 3,4,5 (as the edge counter is sequential input so the block take the older value)
    20              1                     189231         assign sample_ps8  = (Prescale == 6'd8)  && ((edge_count == 5'd2) || (edge_count == 5'd3) || (edge_count == 5'd4))  ;
    21                                               
    22                                                   // Sampling condition for Prescale = 16 → valid at edges 6, 7, 8 (as the edge counter is sequential input so the block take the older value)
    23              1                     189231         assign sample_ps16 = (Prescale == 6'd16) && ((edge_count == 5'd6) || (edge_count == 5'd7) || (edge_count == 5'd8))  ;
    24                                               
    25                                                   // Sampling condition for Prescale = 32 → valid at edges 14, 15, 16
    26              1                     189231         assign sample_ps32 = (Prescale == 6'd32) && ((edge_count == 5'd14) || (edge_count == 5'd15) || (edge_count == 5'd16)) ;
    27                                               
    28                                                   // Combined condition — true if any Prescale's sampling point is reached
    29              1                      20666         assign sample_hit = sample_ps8 || sample_ps16 || sample_ps32 ;
    30                                               
    31                                                   // ----------------------------
    32                                                   // Sample counter update logic
    33                                                   // ----------------------------
    34                                                   wire max_value ;
    35              1                      30998         assign max_value = (counter == 2'd2) ;
    36              1                      43219         always @(posedge clk or negedge rst_n) 
    37                                                   begin
    38                                                       if (!rst_n) 
    39              1                          8                 counter <= 2'b00; // Reset counter
    40                                               
    41                                                       else if (sample_en && sample_hit && !max_value) 
    42              1                      20664                 counter <= counter + 1'b1; // Increment after each sample point
    43                                                           
    44                                                       else if (max_value)
    45              1                      10332                 counter <= 2'b00; // Reset counter when sampling disabled
    46                                                   end
    47                                               
    48                                                   // ----------------------------
    49                                                   // Sampling logic
    50                                                   // ----------------------------
    51              1                      48678         always @(posedge clk or negedge rst_n) 
    52                                                   begin
    53                                                       if (!rst_n) 
    54                                                           begin
    55              1                          8                     sampled_bit  <= 1'b0;   // Clear output bit
    56              1                          8                     sampled_data <= 3'b000; // Clear sample buffer
    57                                                           end 
    58                                                       // Take 3 samples per bit and store them
    59                                                       else if (sample_en && sample_hit) 
    60                                                           begin
    61                                                               if(counter != 2)
    62                                                                   begin
    63              1                      20664                             sampled_data[counter] <= RX_IN; // Store current sample
    64                                                                   end
    65                                                               else // Decide final bit
    66                                                                   begin    
    67              1                      10332                             sampled_bit <= majority_voting({sampled_data , RX_IN});
    68                                                                   end 
    69                                                           end
    70                                                   end
    71                                               
    72                                                   // ----------------------------
    73                                                   // Majority voting function
    74                                                   // ----------------------------
    75                                                   // Returns the value (0 or 1) that appears in at least two out of three samples
    76                                                   function automatic majority_voting (input reg [2:0] data);
    77                                                       begin        
    78              1                      10332                 majority_voting = (data[2] & data[1]) | (data[2] & data[0]) | (data[1] & data[0]); 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        44         6    88.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_sampler --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                     Prescale[0-2]           0           0                                0.00 
                                     Prescale[3-5]           1           1                              100.00 
                                             RX_IN           1           1                              100.00 
                                               clk           1           1                              100.00 
                                      counter[0-1]           1           1                              100.00 
                                   edge_count[0-4]           1           1                              100.00 
                                         max_value           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                         sample_en           1           1                              100.00 
                                        sample_hit           1           1                              100.00 
                                        sample_ps8           1           1                              100.00 
                                       sample_ps16           1           1                              100.00 
                                       sample_ps32           1           1                              100.00 
                                       sampled_bit           1           1                              100.00 
                                 sampled_data[0-1]           1           1                              100.00 

Total Node Count     =         25 
Toggled Node Count   =         22 
Untoggled Node Count =          3 

Toggle Coverage      =      88.00% (44 of 50 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check
=== Design Unit: work.UART_RX_parity_check
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_parity_check.v
------------------------------------IF Branch------------------------------------
    17                                       940     Count coming in to IF
    17              1                         67         assign parity_bit = (PAR_TYP == ODD) ? ~^P_DATA : ^P_DATA ;
    17              2                        873         assign parity_bit = (PAR_TYP == ODD) ? ~^P_DATA : ^P_DATA ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    22                                      7785     Count coming in to IF
    22              1                          8             if (!rst_n)
    26              1                         66             else if (enable && (serial_data != parity_bit) ) 
                                            7711     All False Count
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check --

  File UART_RX_parity_check.v
----------------Focused Condition View-------------------
Line       26 Item    1  (enable && (serial_data != parity_bit))
Condition totals: 2 of 2 input terms covered = 100.00%

                   Input Term   Covered  Reason for no coverage   Hint
                  -----------  --------  -----------------------  --------------
                       enable         Y
  (serial_data != parity_bit)         Y

     Rows:       Hits  FEC Target                     Non-masking condition(s)      
 ---------  ---------  --------------------           -------------------------     
  Row   1:          1  enable_0                       -                             
  Row   2:          1  enable_1                       (serial_data != parity_bit)   
  Row   3:          1  (serial_data != parity_bit)_0  enable                        
  Row   4:          1  (serial_data != parity_bit)_1  enable                        


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      3         3         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check --

  File UART_RX_parity_check.v
-----------Focused Expression View (Bimodal)------------
Line       17 Item    1  (PAR_TYP? ~^P_DATA: ^P_DATA)
Expression totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
     PAR_TYP         Y
    ~^P_DATA         Y
     ^P_DATA         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  PAR_TYP_0             -                                  
 Row   2:           1           0  PAR_TYP_1             -                                  
 Row   3:           1           0  ~^P_DATA_0            PAR_TYP                            
 Row   4:           0           1  ~^P_DATA_1            PAR_TYP                            
 Row   5:           1           0  ^P_DATA_0             ~PAR_TYP                           
 Row   6:           0           1  ^P_DATA_1             ~PAR_TYP                           


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_parity_check.v
    1                                                module UART_RX_parity_check 
    2                                                (
    3                                                    input wire       clk          , // system clock
    4                                                    input wire       rst_n        , // active-low reset
    5                                                    input wire       PAR_TYP      , // parity type: 1 = ODD, 0 = EVEN
    6                                                    input wire       enable       , // enable signal to allow parity checking
    7                                                    input wire       serial_data  , // incoming UART serial data (parity bit)
    8                                                    input wire [7:0] P_DATA       , // parallel data to check parity against
    9                                                    output reg       parity_error   // output flag indicating parity error
    10                                               );
    11                                               
    12                                                   localparam ODD  = 1'b1 ; // ODD parity
    13                                                   localparam EVEN = 1'b0 ; // EVEN parity
    14                                               
    15                                                   // calculate expected parity bit based on P_DATA and PAR_TYP
    16                                                   wire parity_bit ;
    17              1                        942         assign parity_bit = (PAR_TYP == ODD) ? ~^P_DATA : ^P_DATA ;
    18                                               
    19                                                   // sequential logic to check parity on rising edge of clk or reset
    20              1                       7785         always @(posedge clk or negedge rst_n) 
    21                                                   begin
    22                                                       if (!rst_n)
    23                                                           begin
    24              1                          8                     parity_error <= 1'b0 ; // reset parity error
    25                                                           end    
    26                                                       else if (enable && (serial_data != parity_bit) ) 
    27                                                           begin
    28              1                         66                     parity_error <= 1'b1 ; // set error if serial_data does not match expected parity

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        28         2    93.33%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_Par_check --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                           PAR_TYP           0           1                               50.00 
                                       P_DATA[0-7]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                            enable           1           1                              100.00 
                                        parity_bit           1           1                              100.00 
                                      parity_error           0           1                               50.00 
                                             rst_n           1           1                              100.00 
                                       serial_data           1           1                              100.00 

Total Node Count     =         15 
Toggled Node Count   =         13 
Untoggled Node Count =          2 

Toggle Coverage      =      93.33% (28 of 30 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_start_chk
=== Design Unit: work.UART_RX_start_check
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         2         1    66.66%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_start_chk

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_start_check.v
------------------------------------IF Branch------------------------------------
    12                                      7347     Count coming in to IF
    12              1                          8             if(!rst_n)
    16              1                    ***0***             else if (enable && serial_data) 
                                            7339     All False Count
Branch totals: 2 hits of 3 branches = 66.66%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_start_chk --

  File UART_RX_start_check.v
----------------Focused Condition View-------------------
Line       16 Item    1  (enable && serial_data)
Condition totals: 0 of 2 input terms covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
       enable         N  '_1' not hit             Hit '_1'
  serial_data         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  enable_0              -                             
  Row   2:    ***0***  enable_1              serial_data                   
  Row   3:          1  serial_data_0         enable                        
  Row   4:    ***0***  serial_data_1         enable                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         2         1    66.66%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_start_chk --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_start_check.v
    1                                                module UART_RX_start_check 
    2                                                (
    3                                                    input wire clk          , // system clock
    4                                                    input wire rst_n        , // active-low reset
    5                                                    input wire enable       , // enable signal to allow start glitch detection
    6                                                    input wire serial_data  , // incoming UART serial data
    7                                                    output reg start_glitch   // output flag indicating a start glitch
    8                                                );
    9                                                    
    10              1                       7347         always @(posedge clk or negedge rst_n) 
    11                                                   begin
    12                                                       if(!rst_n)
    13                                                           begin
    14              1                          8                     start_glitch <= 1'b0 ; // reset start_glitch to 0 when reset is asserted
    15                                                           end    
    16                                                       else if (enable && serial_data) 
    17                                                           begin
    18              1                    ***0***                     start_glitch <= 1'b1 ; // set start_glitch when enabled and serial data is high

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10         8         2    80.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_start_chk --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 
                                            enable           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                       serial_data           1           1                              100.00 
                                      start_glitch           0           0                                0.00 

Total Node Count     =          5 
Toggled Node Count   =          4 
Untoggled Node Count =          1 

Toggle Coverage      =      80.00% (8 of 10 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_stop_chk
=== Design Unit: work.UART_RX_stop_check
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         3         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_stop_chk

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_stop_check.v
------------------------------------IF Branch------------------------------------
    12                                      7345     Count coming in to IF
    12              1                          8             if(!rst_n)
    16              1                          1             else if (enable && !serial_data) 
                                            7336     All False Count
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_stop_chk --

  File UART_RX_stop_check.v
----------------Focused Condition View-------------------
Line       16 Item    1  (enable && ~serial_data)
Condition totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
       enable         Y
  serial_data         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  enable_0              -                             
  Row   2:          1  enable_1              ~serial_data                  
  Row   3:          1  serial_data_0         enable                        
  Row   4:          1  serial_data_1         enable                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_stop_chk --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_stop_check.v
    1                                                module UART_RX_stop_check 
    2                                                (
    3                                                    input wire clk          , // system clock
    4                                                    input wire rst_n        , // active-low reset
    5                                                    input wire enable       , // enable signal to allow stop error detection
    6                                                    input wire serial_data  , // incoming UART serial data
    7                                                    output reg stop_error     // output flag indicating a stop bit error
    8                                                );
    9                                                    
    10              1                       7345         always @(posedge clk or negedge rst_n) 
    11                                                   begin
    12                                                       if(!rst_n)
    13                                                           begin
    14              1                          8                     stop_error <= 1'b0 ; // reset stop_error to 0 when reset is asserted
    15                                                           end    
    16                                                       else if (enable && !serial_data) 
    17                                                           begin
    18              1                          1                     stop_error <= 1'b1 ; // set stop_error when enabled and serial data is low (stop bit missing)

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10         9         1    90.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_stop_chk --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               clk           1           1                              100.00 
                                            enable           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                       serial_data           1           1                              100.00 
                                        stop_error           0           1                               50.00 

Total Node Count     =          5 
Toggled Node Count   =          4 
Untoggled Node Count =          1 

Toggle Coverage      =      90.00% (9 of 10 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM
=== Design Unit: work.UART_RX_FSM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        40        37         3    92.50%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_FSM.v
------------------------------------IF Branch------------------------------------
    42                                     10343     Count coming in to IF
    42              1                          8             if(!rst_n) 
    46              1                      10335             else     
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    57                                    195629     Count coming in to CASE
    58              1                       1880                 IDLE : 
    69              1                      17640                 START : 
    84              1                     141037                 DATA : 
    99              1                      17868                 PARITY : 
    115             1                      16261                 STOP : 
    131             1                        942                 VALID : 
    142             1                          1                 default: 
Branch totals: 7 hits of 7 branches = 100.00%

------------------------------------IF Branch------------------------------------
    60                                      1880     Count coming in to IF
    60              1                        941                         if(RX_IN)
    64              1                        939                         else      
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    71                                     17640     Count coming in to IF
    71              1                    ***0***                         if(start_glitch)
    75              1                       1372                         else if (edge_cnt == Last_edge)
    79              1                      16268                         else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    86                                    141037     Count coming in to IF
    86              1                       1569                         if(PAR_EN && (bit_cnt == 4'd8) && (edge_cnt == Last_edge))
    90              1                    ***0***                         else if(!PAR_EN && (bit_cnt == 4'd8) && (edge_cnt == Last_edge))
    94              1                     139468                         else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    106                                    17868     Count coming in to IF
    106             1                       1607                         if (Last_edge == edge_cnt)    
    110             1                      16261                         else     
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    122                                    16261     Count coming in to IF
    122             1                        939                         if (edge_cnt == (Last_edge - 1'b1)) // assert valid in the last cycle of STOP state    
    126             1                      15322                         else     
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    133                                      942     Count coming in to IF
    133             1                        941                         if(RX_IN)
    137             1                          1                         else     
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    164                                   190169     Count coming in to CASE
    165             1                        941                 IDLE : 
    171             1                      17208                 START : 
    182             1                     137617                 DATA : 
    196             1                      17200                 PARITY : 
    206             1                      16261                 STOP : 
    215             1                        942                 VALID : 
    230             1                    ***0***                 default: 
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    177                                    17208     Count coming in to IF
    177             1                        940                         if(edge_cnt == Prescale - 2'd2)
    179             1                      16268                         else     
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    187                                   137617     Count coming in to IF
    187             1                       7514                         if(edge_cnt == Last_edge)
    191             1                     130103                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    201                                    17200     Count coming in to IF
    201             1                        939                         if(edge_cnt == Prescale - 2'd2)
    203             1                      16261                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    210                                    16261     Count coming in to IF
    210             1                        939                         if(edge_cnt == Prescale - 2'd2)
    212             1                      15322                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    217                                      942     Count coming in to IF
    217             1                         66                         if(par_err || stp_err)
    223             1                        876                         else     
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      15        10         5    66.66%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM --

  File UART_RX_FSM.v
----------------Focused Condition View-------------------
Line       75 Item    1  (edge_cnt == Last_edge)
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (edge_cnt == Last_edge)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (edge_cnt == Last_edge)_0  -                             
  Row   2:          1  (edge_cnt == Last_edge)_1  -                             

----------------Focused Condition View-------------------
Line       86 Item    1  ((PAR_EN && (bit_cnt == 8)) && (edge_cnt == Last_edge))
Condition totals: 2 of 3 input terms covered = 66.66%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
                   PAR_EN         N  '_0' not hit             Hit '_0'
           (bit_cnt == 8)         Y
  (edge_cnt == Last_edge)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  PAR_EN_0                   -                             
  Row   2:          1  PAR_EN_1                   ((edge_cnt == Last_edge) && (bit_cnt == 8))
  Row   3:          1  (bit_cnt == 8)_0           PAR_EN                        
  Row   4:          1  (bit_cnt == 8)_1           ((edge_cnt == Last_edge) && PAR_EN)
  Row   5:          1  (edge_cnt == Last_edge)_0  (PAR_EN && (bit_cnt == 8))    
  Row   6:          1  (edge_cnt == Last_edge)_1  (PAR_EN && (bit_cnt == 8))    

----------------Focused Condition View-------------------
Line       90 Item    1  ((~PAR_EN && (bit_cnt == 8)) && (edge_cnt == Last_edge))
Condition totals: 0 of 3 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
                   PAR_EN         N  '_0' not hit             Hit '_0'
           (bit_cnt == 8)         N  No hits                  Hit '_0' and '_1'
  (edge_cnt == Last_edge)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  PAR_EN_0                   ((edge_cnt == Last_edge) && (bit_cnt == 8))
  Row   2:          1  PAR_EN_1                   -                             
  Row   3:    ***0***  (bit_cnt == 8)_0           ~PAR_EN                       
  Row   4:    ***0***  (bit_cnt == 8)_1           ((edge_cnt == Last_edge) && ~PAR_EN)
  Row   5:    ***0***  (edge_cnt == Last_edge)_0  (~PAR_EN && (bit_cnt == 8))   
  Row   6:    ***0***  (edge_cnt == Last_edge)_1  (~PAR_EN && (bit_cnt == 8))   

----------------Focused Condition View-------------------
Line       106 Item    1  (Last_edge == edge_cnt)
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Last_edge == edge_cnt)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (Last_edge == edge_cnt)_0  -                             
  Row   2:          1  (Last_edge == edge_cnt)_1  -                             

----------------Focused Condition View-------------------
Line       122 Item    1  (edge_cnt == (Last_edge - 1'b1))
Condition totals: 1 of 1 input term covered = 100.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (edge_cnt == (Last_edge - 1'b1))         Y

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:          1  (edge_cnt == (Last_edge - 1'b1))_0  -                             
  Row   2:          1  (edge_cnt == (Last_edge - 1'b1))_1  -                             

----------------Focused Condition View-------------------
Line       177 Item    1  (edge_cnt == (Prescale - 2))
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (edge_cnt == (Prescale - 2))         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          1  (edge_cnt == (Prescale - 2))_0  -                             
  Row   2:          1  (edge_cnt == (Prescale - 2))_1  -                             

----------------Focused Condition View-------------------
Line       187 Item    1  (edge_cnt == Last_edge)
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (edge_cnt == Last_edge)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (edge_cnt == Last_edge)_0  -                             
  Row   2:          1  (edge_cnt == Last_edge)_1  -                             

----------------Focused Condition View-------------------
Line       201 Item    1  (edge_cnt == (Prescale - 2))
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (edge_cnt == (Prescale - 2))         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          1  (edge_cnt == (Prescale - 2))_0  -                             
  Row   2:          1  (edge_cnt == (Prescale - 2))_1  -                             

----------------Focused Condition View-------------------
Line       210 Item    1  (edge_cnt == (Prescale - 2))
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (edge_cnt == (Prescale - 2))         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          1  (edge_cnt == (Prescale - 2))_0  -                             
  Row   2:          1  (edge_cnt == (Prescale - 2))_1  -                             

----------------Focused Condition View-------------------
Line       217 Item    1  (par_err || stp_err)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
     par_err         Y
     stp_err         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  par_err_0             ~stp_err                      
  Row   2:          1  par_err_1             -                             
  Row   3:          1  stp_err_0             ~par_err                      
  Row   4:    ***0***  stp_err_1             ~par_err                      


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       6         6         0   100.00%
    FSM Transitions                 12         7         5    58.33%

================================FSM Details================================

FSM Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM --

FSM_ID: Current_state
    Current State Object : Current_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  58                IDLE                   0
  69               START                   1
  84                DATA                   3
 115                STOP                   6
  99              PARITY                   2
 131               VALID                   7
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                1886          
                   START                1880          
                    DATA                1880          
                    STOP                1878          
                  PARITY                1878          
                   VALID                 939          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  66                   0                 939          IDLE -> START                 
  77                   1                 940          START -> DATA                 
  88                   4                 939          DATA -> PARITY                
 124                   6                 939          STOP -> VALID                 
 108                   8                 939          PARITY -> STOP                
 139                  10                   1          VALID -> START                
 135                  11                 938          VALID -> IDLE                 
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  73                   2          START -> IDLE       
  92                   3          DATA -> STOP        
  44                   5          DATA -> IDLE        
  44                   7          STOP -> IDLE        
  44                   9          PARITY -> IDLE      


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   6         6         0   100.00%
        FSM Transitions             12         7         5    58.33%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      67        54        13    80.59%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UART_RX_FSM.v
    1                                                module UART_RX_FSM 
    2                                                (
    3                                                    input wire       clk          , 
    4                                                    input wire       rst_n        , 
    5                                                    input wire       RX_IN        ,
    6                                                    input wire       PAR_EN       , 
    7                                                    input wire [5:0] Prescale     , 
    8                                                    input wire [4:0] edge_cnt     ,
    9                                                    input wire [3:0] bit_cnt      , 
    10                                                   input wire       par_err      , 
    11                                                   input wire       stp_err      , 
    12                                                   input wire       start_glitch ,
    13                                                   output reg       dat_samp_en  , 
    14                                                   output reg       edge_en      , 
    15                                                   output reg       deser_en     ,
    16                                                   output reg       par_chk_en   ,
    17                                                   output reg       strt_chk_en  ,
    18                                                   output reg       stp_chk_en   ,
    19                                                   output reg       data_valid   , 
    20                                                   output reg       parity_error , 
    21                                                   output reg       stop_error   
    22                                               );
    23                                               
    24                                                   localparam IDLE   = 3'b000 ; 
    25                                                   localparam START  = 3'b001 ; 
    26                                                   localparam DATA   = 3'b011 ; 
    27                                                   localparam PARITY = 3'b010 ; 
    28                                                   localparam STOP   = 3'b110 ; 
    29                                                   localparam VALID  = 3'b111 ; 
    30                                               
    31                                                   reg  [2:0] Current_state , Next_state ; 
    32                                                   reg error_par , error_stp ; 
    33                                                   wire [4:0] Last_edge ;
    34                                               
    35              1                          7         assign Last_edge = Prescale - 1'b1 ; 
    36                                               
    37                                                   //-----------------------
    38                                                   // State memory
    39                                                   //-----------------------
    40              1                      10343         always @(posedge clk or negedge rst_n) 
    41                                                   begin
    42                                                       if(!rst_n) 
    43                                                           begin
    44              1                          8                     Current_state <= IDLE ;
    45                                                           end    
    46                                                       else     
    47                                                           begin
    48              1                      10335                     Current_state <= Next_state ;
    49                                                           end    
    50                                                   end
    51                                               
    52                                                   //----------------------------------------------------
    53                                                   // Next_state logic 
    54                                                   //----------------------------------------------------
    55              1                     195629         always @(*) 
    56                                                   begin
    57                                                       case (Current_state)
    58                                                           IDLE : 
    59                                                               begin
    60                                                                   if(RX_IN)
    61                                                                       begin
    62              1                        941                                 Next_state = IDLE ; 
    63                                                                       end  
    64                                                                   else      
    65                                                                       begin
    66              1                        939                                 Next_state = START ; 
    67                                                                       end    
    68                                                               end 
    69                                                           START : 
    70                                                               begin
    71                                                                   if(start_glitch)
    72                                                                       begin
    73              1                    ***0***                                 Next_state = IDLE ; 
    74                                                                       end    
    75                                                                   else if (edge_cnt == Last_edge)
    76                                                                       begin
    77              1                       1372                                 Next_state = DATA ;
    78                                                                       end    
    79                                                                   else
    80                                                                       begin
    81              1                      16268                                 Next_state = START ; 
    82                                                                       end    
    83                                                               end 
    84                                                           DATA : 
    85                                                               begin
    86                                                                   if(PAR_EN && (bit_cnt == 4'd8) && (edge_cnt == Last_edge))
    87                                                                       begin
    88              1                       1569                                 Next_state = PARITY ; 
    89                                                                       end 
    90                                                                   else if(!PAR_EN && (bit_cnt == 4'd8) && (edge_cnt == Last_edge))
    91                                                                       begin
    92              1                    ***0***                                 Next_state = STOP ; 
    93                                                                       end 
    94                                                                   else
    95                                                                       begin
    96              1                     139468                                 Next_state = DATA ; 
    97                                                                       end 
    98                                                               end 
    99                                                           PARITY : 
    100                                                              begin
    101                                                                  // if(par_err)
    102                                                                  //     begin
    103                                                                  //         Next_state = IDLE ; 
    104                                                                  //     end
    105                                                                  // else 
    106                                                                  if (Last_edge == edge_cnt)    
    107                                                                      begin
    108             1                       1607                                 Next_state = STOP ; 
    109                                                                      end
    110                                                                  else     
    111                                                                      begin
    112             1                      16261                                 Next_state = PARITY ; 
    113                                                                      end
    114                                                              end 
    115                                                          STOP : 
    116                                                              begin
    117                                                                  // if(stp_err)
    118                                                                  //     begin
    119                                                                  //         Next_state = IDLE ; 
    120                                                                  //     end
    121                                                                  // else 
    122                                                                  if (edge_cnt == (Last_edge - 1'b1)) // assert valid in the last cycle of STOP state    
    123                                                                      begin
    124             1                        939                                 Next_state = VALID ; 
    125                                                                      end
    126                                                                  else     
    127                                                                      begin
    128             1                      15322                                 Next_state = STOP ; 
    129                                                                      end                        
    130                                                              end 
    131                                                          VALID : 
    132                                                              begin
    133                                                                  if(RX_IN)
    134                                                                      begin
    135             1                        941                                 Next_state = IDLE ; 
    136                                                                      end
    137                                                                  else     
    138                                                                      begin
    139             1                          1                                 Next_state = START ; 
    140                                                                      end
    141                                                              end 
    142                                                          default: 
    143                                                              begin
    144             1                          1                         Next_state = IDLE ; 
    145                                                              end 
    146                                                      endcase
    147                                                  end
    148                                                  
    149                                                  //------------------------------------------------------------
    150                                                  // Output & control logic
    151                                                  //------------------------------------------------------------
    152             1                     190169         always @(*) 
    153                                                  begin
    154             1                     190169             edge_en      = 1'b0 ;
    155             1                     190169             deser_en     = 1'b0 ; 
    156             1                     190169             stp_chk_en   = 1'b0 ; 
    157             1                     190169             par_chk_en   = 1'b0 ; 
    158             1                     190169             data_valid   = 1'b0 ; 
    159             1                     190169             stop_error   = 1'b0 ; 
    160             1                     190169             strt_chk_en  = 1'b0 ;
    161             1                     190169             dat_samp_en  = 1'b0 ;
    162             1                     190169             parity_error = 1'b0 ;  
    163                                              
    164                                                      case (Current_state)
    165                                                          IDLE : 
    166                                                              begin
    167             1                        941                         data_valid  = 1'b0 ;    
    168             1                        941                         dat_samp_en = 1'b0 ; 
    169             1                        941                         edge_en     = 1'b0 ; 
    170                                                              end 
    171                                                          START : 
    172                                                              begin
    173             1                      17208                         data_valid  = 1'b0 ;
    174             1                      17208                         edge_en     = 1'b1 ; 
    175             1                      17208                         dat_samp_en = 1'b1 ; 
    176                                              
    177                                                                  if(edge_cnt == Prescale - 2'd2)
    178             1                        940                             strt_chk_en = 1'b1 ;  
    179                                                                  else     
    180             1                      16268                             strt_chk_en = 1'b0 ; 
    181                                                              end 
    182                                                          DATA : 
    183                                                              begin
    184             1                     137617                         dat_samp_en = 1'b1 ;                     
    185             1                     137617                         edge_en     = 1'b1 ; 
    186                                              
    187                                                                  if(edge_cnt == Last_edge)
    188                                                                      begin
    189             1                       7514                                 deser_en = 1'b1 ;  
    190                                                                      end
    191                                                                  else
    192                                                                      begin
    193             1                     130103                                 deser_en = 1'b0 ;  
    194                                                                      end
    195                                                               end 
    196                                                          PARITY : 
    197                                                              begin
    198             1                      17200                         dat_samp_en = 1'b1 ;  
    199             1                      17200                         edge_en     = 1'b1 ;
    200                                              
    201                                                                  if(edge_cnt == Prescale - 2'd2)
    202             1                        939                             par_chk_en  = 1'b1 ;
    203                                                                  else
    204             1                      16261                             par_chk_en  = 1'b0 ;
    205                                                              end 
    206                                                          STOP : 
    207                                                              begin
    208             1                      16261                         edge_en     = 1'b1 ;
    209             1                      16261                         dat_samp_en = 1'b1 ;  
    210                                                                  if(edge_cnt == Prescale - 2'd2)
    211             1                        939                             stp_chk_en  = 1'b1 ;    
    212                                                                  else
    213             1                      15322                             stp_chk_en  = 1'b0 ;
    214                                                              end 
    215                                                          VALID : 
    216                                                              begin
    217                                                                  if(par_err || stp_err)
    218                                                                      begin
    219             1                         66                                 data_valid   = 1'b0 ;
    220             1                         66                                 stop_error   = stp_err ;
    221             1                         66                                 parity_error = par_err ;
    222                                                                      end
    223                                                                  else     
    224                                                                      begin
    225             1                        876                                 data_valid   = 1'b1 ;
    226             1                        876                                 stop_error   = 1'b0 ;
    227             1                        876                                 parity_error = 1'b0 ;
    228                                                                      end
    229                                                              end 
    230                                                          default: 
    231                                                              begin
    232             1                    ***0***                         error_stp    = 1'b0 ; 
    233             1                    ***0***                         error_par    = 1'b0 ; 
    234             1                    ***0***                         edge_en      = 1'b0 ;
    235             1                    ***0***                         deser_en     = 1'b0 ; 
    236             1                    ***0***                         stp_chk_en   = 1'b0 ; 
    237             1                    ***0***                         par_chk_en   = 1'b0 ; 
    238             1                    ***0***                         data_valid   = 1'b0 ; 
    239             1                    ***0***                         stop_error   = 1'b0 ; 
    240             1                    ***0***                         strt_chk_en  = 1'b0 ;  
    241             1                    ***0***                         dat_samp_en  = 1'b0 ;  
    242             1                    ***0***                         parity_error = 1'b0 ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         88        66        22    75.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT/U_FSM --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                Current_state[2-0]           1           1                              100.00 
                                    Last_edge[0-2]           0           0                                0.00 
                                    Last_edge[3-4]           1           1                              100.00 
                                   Next_state[2-0]           1           1                              100.00 
                                            PAR_EN           0           0                                0.00 
                                     Prescale[0-2]           0           0                                0.00 
                                     Prescale[3-5]           1           1                              100.00 
                                             RX_IN           1           1                              100.00 
                                      bit_cnt[0-3]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                       dat_samp_en           1           1                              100.00 
                                        data_valid           1           1                              100.00 
                                          deser_en           1           1                              100.00 
                                     edge_cnt[0-4]           1           1                              100.00 
                                           edge_en           1           1                              100.00 
                                         error_par           0           0                                0.00 
                                         error_stp           0           0                                0.00 
                                        par_chk_en           1           1                              100.00 
                                           par_err           0           1                               50.00 
                                      parity_error           1           1                              100.00 
                                             rst_n           1           1                              100.00 
                                      start_glitch           0           0                                0.00 
                                        stop_error           1           1                              100.00 
                                        stp_chk_en           1           1                              100.00 
                                           stp_err           0           1                               50.00 
                                       strt_chk_en           1           1                              100.00 

Total Node Count     =         44 
Toggled Node Count   =         32 
Untoggled Node Count =         12 

Toggle Coverage      =      75.00% (66 of 88 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART/RX_UNIT
=== Design Unit: work.UART_RX_Top
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         82        69        13    84.14%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART/RX_UNIT --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                        Data_valid           1           1                              100.00 
                                            PAR_EN           0           0                                0.00 
                                           PAR_TYP           0           1                               50.00 
                                       P_DATA[0-7]           1           1                              100.00 
                                        Parity_Err           0           1                               50.00 
                                      Parity_Error           1           1                              100.00 
                                     Prescale[0-2]           0           0                                0.00 
                                     Prescale[3-5]           1           1                              100.00 
                                               RST           1           1                              100.00 
                                             RX_IN           1           1                              100.00 
                                         Start_Err           0           0                                0.00 
                                          Stop_Err           0           1                               50.00 
                                        Stop_Error           1           1                              100.00 
                                    bit_count[0-3]           1           1                              100.00 
                                   edge_count[0-4]           1           1                              100.00 
                                        enable_des           1           1                              100.00 
                                       enable_edge           1           1                              100.00 
                                        enable_par           1           1                              100.00 
                                        enable_stp           1           1                              100.00 
                                        enable_str           1           1                              100.00 
                                           samp_en           1           1                              100.00 
                                        serial_bit           1           1                              100.00 

Total Node Count     =         41 
Toggled Node Count   =         33 
Untoggled Node Count =          8 

Toggle Coverage      =      84.14% (69 of 82 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_UART
=== Design Unit: work.UART_TOP
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         68        59         9    86.76%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_UART --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            PAR_EN           0           0                                0.00 
                                           PAR_TYP           0           1                               50.00 
                                     Prescale[0-2]           0           0                                0.00 
                                     Prescale[3-5]           1           1                              100.00 
                                               RST           1           1                              100.00 
                                            RX_CLK           1           1                              100.00 
                                           RX_IN_S           1           1                              100.00 
                                     RX_OUT_P[0-7]           1           1                              100.00 
                                          RX_OUT_V           1           1                              100.00 
                                            TX_CLK           1           1                              100.00 
                                      TX_IN_P[0-7]           1           1                              100.00 
                                           TX_IN_V           1           1                              100.00 
                                          TX_OUT_S           1           1                              100.00 
                                          TX_OUT_V           1           1                              100.00 
                                      parity_error           1           1                              100.00 
                                        stop_error           1           1                              100.00 

Total Node Count     =         34 
Toggled Node Count   =         29 
Untoggled Node Count =          5 

Toggle Coverage      =      86.76% (59 of 68 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_SYS_CTRL
=== Design Unit: work.SYS_CTRL
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        58        56         2    96.55%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_SYS_CTRL

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File SYS_CTRL.sv
------------------------------------IF Branch------------------------------------
    74                                      2832     Count coming in to IF
    74              1                          8             if(!RST)
    76              1                       2824             else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    85                                      3052     Count coming in to CASE
    87              1                        610                 IDLE: 
    97              1                         66                 WR_CMD     : Next_State = (RX_ENABLE)  ? WR_ADD  : WR_CMD; 
    98              1                         66                 WR_ADD     : Next_State = (RX_ENABLE)  ? WR_DATA : WR_ADD; 
    99              1                         33                 WR_DATA    : Next_State = IDLE;  
    102             1                         78                 RD_CMD     : Next_State = (RX_ENABLE)                   ? RD_ADD      : RD_CMD;  
    103             1                         78                 RD_ADD     : Next_State = (Rd_Data_Valid && !FIFO_FULL) ? RD_REG_FILE : RD_ADD ;  
    104             1                         39                 RD_REG_FILE: Next_State = IDLE;  
    107             1                        234                 ALU_CMD_OP : Next_State = (RX_ENABLE)                   ? OP_A        : ALU_CMD_OP; 
    108             1                        234                 OP_A       : Next_State = (RX_ENABLE)                   ? OP_B        : OP_A; 
    109             1                        349                 OP_B       : Next_State = (RX_ENABLE)                   ? FUN         : OP_B; 
    110             1                        462                 FUN        : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_low  : FUN ; 
    113             1                        341                 ALU_CMD_NOP: Next_State = (RX_ENABLE)                   ? FUN         : ALU_CMD_NOP; 
    116             1                        231                 RD_ALU_low : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_high : RD_ALU_low ; 
    117             1                        231                 RD_ALU_high: Next_State = IDLE; 
    120             1                    ***0***                 default    : Next_State = IDLE; 
Branch totals: 14 hits of 15 branches = 93.33%

------------------------------------IF Branch------------------------------------
    89                                       610     Count coming in to IF
    89              1                         33                         if     (RX_ENABLE && (RX_P_DATA == Reg_file_W))  Next_State = WR_CMD ; 
    90              1                         39                         else if(RX_ENABLE && (RX_P_DATA == Reg_file_R))  Next_State = RD_CMD ; 
    91              1                        117                         else if(RX_ENABLE && (RX_P_DATA == ALU_OP)    )  Next_State = ALU_CMD_OP ; 
    92              1                        114                         else if(RX_ENABLE && (RX_P_DATA == ALU_NOP)   )  Next_State = ALU_CMD_NOP ; 
    93              1                        307                         else                                             Next_State = IDLE ; 
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------IF Branch------------------------------------
    97                                        66     Count coming in to IF
    97              2                         33                 WR_CMD     : Next_State = (RX_ENABLE)  ? WR_ADD  : WR_CMD; 
    97              3                         33                 WR_CMD     : Next_State = (RX_ENABLE)  ? WR_ADD  : WR_CMD; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    98                                        66     Count coming in to IF
    98              2                         33                 WR_ADD     : Next_State = (RX_ENABLE)  ? WR_DATA : WR_ADD; 
    98              3                         33                 WR_ADD     : Next_State = (RX_ENABLE)  ? WR_DATA : WR_ADD; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    102                                       78     Count coming in to IF
    102             2                         39                 RD_CMD     : Next_State = (RX_ENABLE)                   ? RD_ADD      : RD_CMD;  
    102             3                         39                 RD_CMD     : Next_State = (RX_ENABLE)                   ? RD_ADD      : RD_CMD;  
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                       78     Count coming in to IF
    103             2                         39                 RD_ADD     : Next_State = (Rd_Data_Valid && !FIFO_FULL) ? RD_REG_FILE : RD_ADD ;  
    103             3                         39                 RD_ADD     : Next_State = (Rd_Data_Valid && !FIFO_FULL) ? RD_REG_FILE : RD_ADD ;  
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    107                                      234     Count coming in to IF
    107             2                        117                 ALU_CMD_OP : Next_State = (RX_ENABLE)                   ? OP_A        : ALU_CMD_OP; 
    107             3                        117                 ALU_CMD_OP : Next_State = (RX_ENABLE)                   ? OP_A        : ALU_CMD_OP; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    108                                      234     Count coming in to IF
    108             2                        117                 OP_A       : Next_State = (RX_ENABLE)                   ? OP_B        : OP_A; 
    108             3                        117                 OP_A       : Next_State = (RX_ENABLE)                   ? OP_B        : OP_A; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    109                                      349     Count coming in to IF
    109             2                        117                 OP_B       : Next_State = (RX_ENABLE)                   ? FUN         : OP_B; 
    109             3                        232                 OP_B       : Next_State = (RX_ENABLE)                   ? FUN         : OP_B; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    110                                      462     Count coming in to IF
    110             2                        231                 FUN        : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_low  : FUN ; 
    110             3                        231                 FUN        : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_low  : FUN ; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    113                                      341     Count coming in to IF
    113             2                        114                 ALU_CMD_NOP: Next_State = (RX_ENABLE)                   ? FUN         : ALU_CMD_NOP; 
    113             3                        227                 ALU_CMD_NOP: Next_State = (RX_ENABLE)                   ? FUN         : ALU_CMD_NOP; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    116                                      231     Count coming in to IF
    116             2                        231                 RD_ALU_low : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_high : RD_ALU_low ; 
    116             3                    ***0***                 RD_ALU_low : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_high : RD_ALU_low ; 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------CASE Branch------------------------------------
    140                                     3059     Count coming in to CASE
    142             1                         33                 WR_DATA : 
    150             1                         59                 RD_ADD : 
    157             1                         39                 RD_REG_FILE : 
    165             1                        315                 ALU_CMD_NOP : 
    171             1                        347                 OP_A : 
    180             1                        314                 OP_B : 
    189             1                        403                 FUN : 
    197             1                        231                 RD_ALU_low : 
    204             1                        231                 RD_ALU_high : 
    211             1                       1087                 default: 
Branch totals: 10 hits of 10 branches = 100.00%

------------------------------------IF Branch------------------------------------
    231                                     2861     Count coming in to IF
    231             1                          8             if(!RST)
    235             1                         62             else if(Current_State == WR_ADD && Next_State == WR_ADD) // Sampling the address At the correct time  
                                            2791     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    245                                     2673     Count coming in to IF
    245             1                          8             if(!RST)
    249             1                        579             else if(Current_State == OP_A || Current_State == OP_B) // Sampling the data At the correct time  
                                            2086     All False Count
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      18        13         5    72.22%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_SYS_CTRL --

  File SYS_CTRL.sv
----------------Focused Condition View-------------------
Line       89 Item    1  (RX_ENABLE && (RX_P_DATA == 170))
Condition totals: 2 of 2 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
           RX_ENABLE         Y
  (RX_P_DATA == 170)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RX_ENABLE_0           -                             
  Row   2:          1  RX_ENABLE_1           (RX_P_DATA == 170)            
  Row   3:          1  (RX_P_DATA == 170)_0  RX_ENABLE                     
  Row   4:          1  (RX_P_DATA == 170)_1  RX_ENABLE                     

----------------Focused Condition View-------------------
Line       90 Item    1  (RX_ENABLE && (RX_P_DATA == 187))
Condition totals: 2 of 2 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
           RX_ENABLE         Y
  (RX_P_DATA == 187)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RX_ENABLE_0           -                             
  Row   2:          1  RX_ENABLE_1           (RX_P_DATA == 187)            
  Row   3:          1  (RX_P_DATA == 187)_0  RX_ENABLE                     
  Row   4:          1  (RX_P_DATA == 187)_1  RX_ENABLE                     

----------------Focused Condition View-------------------
Line       91 Item    1  (RX_ENABLE && (RX_P_DATA == 204))
Condition totals: 2 of 2 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
           RX_ENABLE         Y
  (RX_P_DATA == 204)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RX_ENABLE_0           -                             
  Row   2:          1  RX_ENABLE_1           (RX_P_DATA == 204)            
  Row   3:          1  (RX_P_DATA == 204)_0  RX_ENABLE                     
  Row   4:          1  (RX_P_DATA == 204)_1  RX_ENABLE                     

----------------Focused Condition View-------------------
Line       92 Item    1  (RX_ENABLE && (RX_P_DATA == 221))
Condition totals: 1 of 2 input terms covered = 50.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
           RX_ENABLE         Y
  (RX_P_DATA == 221)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RX_ENABLE_0           -                             
  Row   2:          1  RX_ENABLE_1           (RX_P_DATA == 221)            
  Row   3:    ***0***  (RX_P_DATA == 221)_0  RX_ENABLE                     
  Row   4:          1  (RX_P_DATA == 221)_1  RX_ENABLE                     

----------------Focused Condition View-------------------
Line       103 Item    1  (Rd_Data_Valid && ~FIFO_FULL)
Condition totals: 1 of 2 input terms covered = 50.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  Rd_Data_Valid         Y
      FIFO_FULL         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  Rd_Data_Valid_0       -                             
  Row   2:          1  Rd_Data_Valid_1       ~FIFO_FULL                    
  Row   3:          1  FIFO_FULL_0           Rd_Data_Valid                 
  Row   4:    ***0***  FIFO_FULL_1           Rd_Data_Valid                 

----------------Focused Condition View-------------------
Line       110 Item    1  (ALU_Valid && ~FIFO_FULL)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   ALU_Valid         Y
   FIFO_FULL         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  ALU_Valid_0           -                             
  Row   2:          1  ALU_Valid_1           ~FIFO_FULL                    
  Row   3:          1  FIFO_FULL_0           ALU_Valid                     
  Row   4:    ***0***  FIFO_FULL_1           ALU_Valid                     

----------------Focused Condition View-------------------
Line       116 Item    1  (ALU_Valid && ~FIFO_FULL)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   ALU_Valid         N  '_0' not hit             Hit '_0'
   FIFO_FULL         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  ALU_Valid_0           -                             
  Row   2:          1  ALU_Valid_1           ~FIFO_FULL                    
  Row   3:          1  FIFO_FULL_0           ALU_Valid                     
  Row   4:    ***0***  FIFO_FULL_1           ALU_Valid                     

----------------Focused Condition View-------------------
Line       235 Item    1  ((Current_State == WR_ADD) && (Next_State == WR_ADD))
Condition totals: 2 of 2 input terms covered = 100.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (Current_State == WR_ADD)         Y
     (Next_State == WR_ADD)         Y

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (Current_State == WR_ADD)_0  -                             
  Row   2:          1  (Current_State == WR_ADD)_1  (Next_State == WR_ADD)        
  Row   3:          1  (Next_State == WR_ADD)_0     (Current_State == WR_ADD)     
  Row   4:          1  (Next_State == WR_ADD)_1     (Current_State == WR_ADD)     

----------------Focused Condition View-------------------
Line       249 Item    1  ((Current_State == OP_A) || (Current_State == OP_B))
Condition totals: 2 of 2 input terms covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Current_State == OP_A)         Y
  (Current_State == OP_B)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (Current_State == OP_A)_0  ~(Current_State == OP_B)      
  Row   2:          1  (Current_State == OP_A)_1  -                             
  Row   3:          1  (Current_State == OP_B)_0  ~(Current_State == OP_A)      
  Row   4:          1  (Current_State == OP_B)_1  ~(Current_State == OP_A)      


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      14        14         0   100.00%
    FSM Transitions                 27        17        10    62.96%

================================FSM Details================================

FSM Coverage for instance /\TB_TOP#DUT /U0_SYS_CTRL --

FSM_ID: Current_State
    Current State Object : Current_State
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  87                IDLE                   0
 113         ALU_CMD_NOP                   8
 107          ALU_CMD_OP                   7
 102              RD_CMD                   4
  97              WR_CMD                   1
  98              WR_ADD                   2
  99             WR_DATA                   3
 103              RD_ADD                   5
 104         RD_REG_FILE                   6
 108                OP_A                   9
 109                OP_B                  10
 110                 FUN                  11
 116          RD_ALU_low                  12
 117         RD_ALU_high                  13
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                 618          
             ALU_CMD_NOP                 228          
              ALU_CMD_OP                 234          
                  RD_CMD                  78          
                  WR_CMD                  66          
                  WR_ADD                  66          
                 WR_DATA                  33          
                  RD_ADD                  78          
             RD_REG_FILE                  39          
                    OP_A                 234          
                    OP_B                 234          
                     FUN                 462          
              RD_ALU_low                 231          
             RD_ALU_high                 231          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  92                   0                 114          IDLE -> ALU_CMD_NOP           
  91                   1                 117          IDLE -> ALU_CMD_OP            
  90                   2                  39          IDLE -> RD_CMD                
  89                   3                  33          IDLE -> WR_CMD                
 113                   4                 114          ALU_CMD_NOP -> FUN            
 107                   6                 117          ALU_CMD_OP -> OP_A            
 102                   8                  39          RD_CMD -> RD_ADD              
  97                  10                  33          WR_CMD -> WR_ADD              
  98                  12                  33          WR_ADD -> WR_DATA             
  99                  14                  33          WR_DATA -> IDLE               
 103                  15                  39          RD_ADD -> RD_REG_FILE          
 104                  17                  39          RD_REG_FILE -> IDLE           
 108                  18                 117          OP_A -> OP_B                  
 109                  20                 117          OP_B -> FUN                   
 110                  22                 231          FUN -> RD_ALU_low             
 116                  24                 231          RD_ALU_low -> RD_ALU_high          
 117                  26                 231          RD_ALU_high -> IDLE           
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  75                   5          ALU_CMD_NOP -> IDLE 
  75                   7          ALU_CMD_OP -> IDLE  
  75                   9          RD_CMD -> IDLE      
  75                  11          WR_CMD -> IDLE      
  75                  13          WR_ADD -> IDLE      
  75                  16          RD_ADD -> IDLE      
  75                  19          OP_A -> IDLE        
  75                  21          OP_B -> IDLE        
  75                  23          FUN -> IDLE         
  75                  25          RD_ALU_low -> IDLE  


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  14        14         0   100.00%
        FSM Transitions             27        17        10    62.96%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      70        69         1    98.57%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_SYS_CTRL --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File SYS_CTRL.sv
    26                                               module SYS_CTRL 
    27                                               (
    28                                                   // Input Ports
    29                                                   input  wire        CLK           , // System clock
    30                                                   input  wire        RST           , // Active-low reset
    31                                                   input  wire        ALU_Valid     , // Indicates ALU_OUT is valid
    32                                                   input  wire        Rd_Data_Valid , // Indicates RdData is valid from Reg_file   
    33                                                   input  wire        RX_ENABLE     , // Data sync Enable 
    34                                                   input  wire        FIFO_FULL     , // FIFO full flag  
    35                                                   input  wire [7:0]  Rd_Data       , // Data read from Reg_file
    36                                                   input  wire [7:0]  RX_P_DATA     , // RX parallel data
    37                                                   input  wire [15:0] ALU_OUT       , // ALU operation result
    38                                               
    39                                                   // Output Ports
    40                                                   output reg        Wr_En         , // Write enable for memory/peripheral
    41                                                   output reg        Rd_En         , // Read enable for memory/peripheral
    42                                                   output reg        ALU_EN        , // ALU enable signal
    43                                                   output reg        CLK_EN        , // Clock gate enable
    44                                                   output reg        TX_D_VLD      , // TX parallel data valid (WR_INC)
    45                                                   output reg        clk_div_en    , // Enable signal for clock divider
    46                                                   output reg [3:0]  ALU_FUN       , // ALU function select
    47                                                   output reg [3:0]  Address       , // Address bus for Reg_file
    48                                                   output reg [7:0]  Wr_Data       , // Data to be written in Reg_file
    49                                                   output reg [7:0]  TX_P_DATA       // TX parallel data (written in FIFO)
    50                                               );
    51                                               
    52                                                   //===========================
    53                                                   // Command Opcodes
    54                                                   //===========================
    55                                                   localparam Reg_file_W = 8'hAA ; // Write Reg_file command
    56                                                   localparam Reg_file_R = 8'hBB ; // Read Reg_file command
    57                                                   localparam ALU_OP     = 8'hCC ; // ALU operation command
    58                                                   localparam ALU_NOP    = 8'hDD ; // ALU no-operation command
    59                                               
    60                                                   //===========================
    61                                                   // Internal Signals
    62                                                   //===========================
    63                                                   state_e Current_State, Next_State ; // FSM state registers
    64                                                   reg [7:0] RX_P_DATA_reg;            // 1-cycle delay for data/address alignment
    65                                                   reg [3:0] W_add_reg ;               // Temporary register for write address
    66                                               
    67                                                   assign clk_div_en = 1'b1 ;          // Clock divider always enabled
    68                                               
    69                                                   //===========================
    70                                                   // State Register (Memory)
    71                                                   //===========================
    72              1                       2832         always @(posedge CLK or negedge RST) 
    73                                                   begin
    74                                                       if(!RST)
    75              1                          8                 Current_State <= IDLE ;      // Reset -> idle
    76                                                       else 
    77              1                       2824                 Current_State <= Next_State; // Update FSM state
    78                                                   end
    79                                               
    80                                                   //===========================
    81                                                   // Next-State Logic
    82                                                   //===========================
    83              1                       3052         always @(*) 
    84                                                   begin
    85                                                       case (Current_State)
    86                                                           // Idle -> wait for valid RX command
    87                                                           IDLE: 
    88                                                               begin
    89              1                         33                         if     (RX_ENABLE && (RX_P_DATA == Reg_file_W))  Next_State = WR_CMD ; 
    90              1                         39                         else if(RX_ENABLE && (RX_P_DATA == Reg_file_R))  Next_State = RD_CMD ; 
    91              1                        117                         else if(RX_ENABLE && (RX_P_DATA == ALU_OP)    )  Next_State = ALU_CMD_OP ; 
    92              1                        114                         else if(RX_ENABLE && (RX_P_DATA == ALU_NOP)   )  Next_State = ALU_CMD_NOP ; 
    93              1                        307                         else                                             Next_State = IDLE ; 
    94                                                               end
    95                                               
    96                                                           // Write sequence
    97              1                         66                 WR_CMD     : Next_State = (RX_ENABLE)  ? WR_ADD  : WR_CMD; 
    98              1                         66                 WR_ADD     : Next_State = (RX_ENABLE)  ? WR_DATA : WR_ADD; 
    99              1                         33                 WR_DATA    : Next_State = IDLE;  
    100                                              
    101                                                          // Read sequence
    102             1                         78                 RD_CMD     : Next_State = (RX_ENABLE)                   ? RD_ADD      : RD_CMD;  
    103             1                         78                 RD_ADD     : Next_State = (Rd_Data_Valid && !FIFO_FULL) ? RD_REG_FILE : RD_ADD ;  
    104             1                         39                 RD_REG_FILE: Next_State = IDLE;  
    105                                              
    106                                                          // ALU operation
    107             1                        234                 ALU_CMD_OP : Next_State = (RX_ENABLE)                   ? OP_A        : ALU_CMD_OP; 
    108             1                        234                 OP_A       : Next_State = (RX_ENABLE)                   ? OP_B        : OP_A; 
    109             1                        349                 OP_B       : Next_State = (RX_ENABLE)                   ? FUN         : OP_B; 
    110             1                        462                 FUN        : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_low  : FUN ; 
    111                                              
    112                                                          // ALU no-op
    113             1                        341                 ALU_CMD_NOP: Next_State = (RX_ENABLE)                   ? FUN         : ALU_CMD_NOP; 
    114                                              
    115                                                          // ALU readback
    116             1                        231                 RD_ALU_low : Next_State = (ALU_Valid && !FIFO_FULL)     ? RD_ALU_high : RD_ALU_low ; 
    117             1                        231                 RD_ALU_high: Next_State = IDLE; 
    118                                              
    119                                                          // Default -> reset to idle
    120             1                    ***0***                 default    : Next_State = IDLE; 
    121                                                      endcase    
    122                                                  end
    123                                              
    124                                                  //===========================
    125                                                  // Output Logic
    126                                                  //===========================
    127             1                       3059         always @(*) 
    128                                                  begin
    129                                                      // Default outputs (inactive)
    130             1                       3059             Wr_En      = 0 ;  
    131             1                       3059             Rd_En      = 0 ;   
    132             1                       3059             ALU_EN     = 0 ; 
    133             1                       3059             CLK_EN     = 0 ; 
    134             1                       3059             TX_D_VLD   = 0 ; 
    135             1                       3059             ALU_FUN    = 0 ;
    136             1                       3059             Address    = 0 ;
    137             1                       3059             Wr_Data    = 0 ;
    138             1                       3059             TX_P_DATA  = 0 ;
    139                                              
    140                                                      case (Current_State)
    141                                                          // Write data into Reg_file
    142                                                          WR_DATA : 
    143                                                              begin
    144             1                         33                         Address = W_add_reg ;
    145             1                         33                         Wr_Data = RX_P_DATA ;
    146             1                         33                         Wr_En   = 1'b1 ;
    147                                                              end    
    148                                              
    149                                                          // Read address -> enable read
    150                                                          RD_ADD : 
    151                                                              begin
    152             1                         59                         Address = RX_P_DATA ; 
    153             1                         59                         Rd_En   = 1'b1 ;
    154                                                              end                       
    155                                              
    156                                                          // Read result from Reg_file -> send to TX
    157                                                          RD_REG_FILE : 
    158                                                              begin
    159             1                         39                         TX_P_DATA = Rd_Data ; 
    160             1                         39                         TX_D_VLD  = 1'b1 ; 
    161                                                              end                       
    162                                              
    163                                                               
    164                                                          // Enable ALU clock for preparation
    165                                                          ALU_CMD_NOP : 
    166                                                              begin
    167             1                        315                         CLK_EN = 1'b1 ; 
    168                                                              end                       
    169                                              
    170                                                          // Capture operand A
    171                                                          OP_A : 
    172                                                              begin
    173             1                        347                         Address = 4'd0 ;
    174             1                        347                         Wr_Data = RX_P_DATA_reg ; 
    175             1                        347                         Wr_En   = 1'b1 ; 
    176                                                              end                       
    177                                              
    178                                                          // Enable ALU clock for preparation
    179                                                          // Capture operand B
    180                                                          OP_B : 
    181                                                              begin
    182             1                        314                         CLK_EN  = 1'b1 ;
    183             1                        314                         Address = 4'd1 ;
    184             1                        314                         Wr_Data = RX_P_DATA_reg ; 
    185             1                        314                         Wr_En   = 1'b1 ; 
    186                                                              end                       
    187                                              
    188                                                          // Apply ALU function
    189                                                          FUN : 
    190                                                              begin
    191             1                        403                         CLK_EN  = 1'b1 ;
    192             1                        403                         ALU_EN  = 1'b1 ;
    193             1                        403                         ALU_FUN = RX_P_DATA[3:0] ; 
    194                                                              end                       
    195                                              
    196                                                          // Send ALU result (LSB first)
    197                                                          RD_ALU_low : 
    198                                                              begin
    199             1                        231                         TX_P_DATA = ALU_OUT[7:0] ; 
    200             1                        231                         TX_D_VLD  = 1'b1 ; 
    201                                                              end                       
    202                                              
    203                                                          // Send ALU result (MSB second)
    204                                                          RD_ALU_high : 
    205                                                              begin
    206             1                        231                         TX_P_DATA = ALU_OUT[15:8] ; 
    207             1                        231                         TX_D_VLD  = 1'b1 ; 
    208                                                              end                       
    209                                              
    210                                                          // Default -> keep outputs inactive
    211                                                          default: 
    212                                                              begin
    213             1                       1087                         Wr_En      = 0 ;  
    214             1                       1087                         Rd_En      = 0 ;   
    215             1                       1087                         ALU_EN     = 0 ; 
    216             1                       1087                         CLK_EN     = 0 ; 
    217             1                       1087                         TX_D_VLD   = 0 ; 
    218             1                       1087                         ALU_FUN    = 0 ;
    219             1                       1087                         Address    = 0 ;
    220             1                       1087                         Wr_Data    = 0 ;
    221             1                       1087                         TX_P_DATA  = 0 ;
    222                                                              end
    223                                                      endcase 
    224                                                  end
    225                                              
    226                                                  //===========================
    227                                                  // Write Address Register
    228                                                  //===========================
    229             1                       2861         always @(posedge CLK or negedge RST)
    230                                                  begin
    231                                                      if(!RST)
    232                                                          begin
    233             1                          8                     W_add_reg <= 4'b0;            // Reset -> clear
    234                                                          end
    235                                                      else if(Current_State == WR_ADD && Next_State == WR_ADD) // Sampling the address At the correct time  
    236                                                          begin
    237             1                         62                     W_add_reg <= RX_P_DATA;       // Capture address from RX
    238                                                          end
    239                                                  end
    240                                                  //===========================
    241                                                  // RX data Register
    242                                                  //===========================
    243             1                       2673         always @(posedge CLK or negedge RST)
    244                                                  begin
    245                                                      if(!RST)
    246                                                          begin
    247             1                          8                     RX_P_DATA_reg <= 8'b0;            // Reset 
    248                                                          end
    249                                                      else if(Current_State == OP_A || Current_State == OP_B) // Sampling the data At the correct time  
    250                                                          begin
    251             1                        579                     RX_P_DATA_reg <= RX_P_DATA;       // Capture it 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        188       184         4    97.87%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_SYS_CTRL --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            ALU_EN           1           1                              100.00 
                                      ALU_FUN[3-0]           1           1                              100.00 
                                     ALU_OUT[0-15]           1           1                              100.00 
                                         ALU_Valid           1           1                              100.00 
                                      Address[3-0]           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                            CLK_EN           1           1                              100.00 
                                     Current_State               ENUM type       Value       Count 
                                                                      IDLE          11      100.00 
                                                                    WR_CMD           1      100.00 
                                                                    WR_ADD           1      100.00 
                                                                   WR_DATA           1      100.00 
                                                                    RD_CMD           1      100.00 
                                                                    RD_ADD           1      100.00 
                                                               RD_REG_FILE           1      100.00 
                                                                ALU_CMD_OP           4      100.00 
                                                               ALU_CMD_NOP           5      100.00 
                                                                      OP_A           4      100.00 
                                                                      OP_B           4      100.00 
                                                                       FUN           9      100.00 
                                                                RD_ALU_low           9      100.00 
                                                               RD_ALU_high           9      100.00 
                                         FIFO_FULL           0           0                                0.00 
                                        Next_State               ENUM type       Value       Count 
                                                                      IDLE          11      100.00 
                                                                    WR_CMD           1      100.00 
                                                                    WR_ADD           1      100.00 
                                                                   WR_DATA           1      100.00 
                                                                    RD_CMD           1      100.00 
                                                                    RD_ADD           1      100.00 
                                                               RD_REG_FILE           1      100.00 
                                                                ALU_CMD_OP           4      100.00 
                                                               ALU_CMD_NOP           5      100.00 
                                                                      OP_A           4      100.00 
                                                                      OP_B           4      100.00 
                                                                       FUN           9      100.00 
                                                                RD_ALU_low           9      100.00 
                                                               RD_ALU_high           9      100.00 
                                               RST           1           1                              100.00 
                                         RX_ENABLE           1           1                              100.00 
                                    RX_P_DATA[0-7]           1           1                              100.00 
                                RX_P_DATA_reg[7-0]           1           1                              100.00 
                                      Rd_Data[0-7]           1           1                              100.00 
                                     Rd_Data_Valid           1           1                              100.00 
                                             Rd_En           1           1                              100.00 
                                          TX_D_VLD           1           1                              100.00 
                                    TX_P_DATA[7-0]           1           1                              100.00 
                                    W_add_reg[3-0]           1           1                              100.00 
                                      Wr_Data[7-0]           1           1                              100.00 
                                             Wr_En           1           1                              100.00 
                                        clk_div_en           0           0                                0.00 

Total Node Count     =        108 
Toggled Node Count   =        106 
Untoggled Node Count =          2 

Toggle Coverage      =      97.87% (184 of 188 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_RegFile
=== Design Unit: work.RegFile
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10        10         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_RegFile

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RegFile.v
------------------------------------IF Branch------------------------------------
    35                                       869     Count coming in to IF
    35              1                          8             if (!RST) 
    45              1                        609             else if (WrEn && !RdEn) 
    49              1                         59             else if (RdEn && !WrEn) 
                                             193     All False Count
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    40                                       128     Count coming in to IF
    40              1                          8                         if      (i == 2) REG_FILE[i] <= 'b100000_0_1; // Default init value
    41              1                          8                         else if (i == 3) REG_FILE[i] <= 'b0010_0000; // Default init value
    42              1                        112                         else             REG_FILE[i] <= 'd0;          // Reset others
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    58                                       468     Count coming in to IF
    58              1                          8             if (!RST) 
    62              1                         78             else if (RdEn && !WrEn)
    66              1                        382             else 
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         5         3    62.50%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_RegFile --

  File RegFile.v
----------------Focused Condition View-------------------
Line       40 Item    1  (i == 2)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (i == 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i == 2)_0            -                             
  Row   2:          1  (i == 2)_1            -                             

----------------Focused Condition View-------------------
Line       41 Item    1  (i == 3)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (i == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i == 3)_0            -                             
  Row   2:          1  (i == 3)_1            -                             

----------------Focused Condition View-------------------
Line       45 Item    1  (WrEn && ~RdEn)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        WrEn         Y
        RdEn         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  WrEn_0                -                             
  Row   2:          1  WrEn_1                ~RdEn                         
  Row   3:          1  RdEn_0                WrEn                          
  Row   4:    ***0***  RdEn_1                WrEn                          

----------------Focused Condition View-------------------
Line       49 Item    1  (RdEn && ~WrEn)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        RdEn         Y
        WrEn         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RdEn_0                -                             
  Row   2:          1  RdEn_1                ~WrEn                         
  Row   3:          1  WrEn_0                RdEn                          
  Row   4:    ***0***  WrEn_1                RdEn                          

----------------Focused Condition View-------------------
Line       62 Item    1  (RdEn && ~WrEn)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        RdEn         Y
        WrEn         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  RdEn_0                -                             
  Row   2:          1  RdEn_1                ~WrEn                         
  Row   3:          1  WrEn_0                RdEn                          
  Row   4:    ***0***  WrEn_1                RdEn                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      17        17         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_RegFile --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RegFile.v
    1                                                module RegFile #(parameter DEPTH = 16, WIDTH = 8)
    2                                                (
    3                                                    // Input Ports
    4                                                    input  wire                      CLK      , // Clock Signal 
    5                                                    input  wire                      RST      , // Active Low Reset
    6                                                    input  wire [$clog2(DEPTH)-1:0]  Address  , // Address bus
    7                                                    input  wire                      WrEn     , // Write Enable
    8                                                    input  wire                      RdEn     , // Read Enable
    9                                                    input  wire [WIDTH-1:0]          WrData   , // Write Data Bus
    10                                               
    11                                                   // Output Ports
    12                                                   output reg  [WIDTH-1:0]          RdData   , // Read Data Bus
    13                                                   output reg                       RdValid  , // Read Data Valid
    14                                               
    15                                                   // Register Outputs
    16                                                   output wire [WIDTH-1:0]          REG0     , // Register at Address 0x0
    17                                                   output wire [WIDTH-1:0]          REG1     , // Register at Address 0x1
    18                                                   output wire [WIDTH-1:0]          REG2     , // Register at Address 0x2
    19                                                   output wire [WIDTH-1:0]          REG3       // Register at Address 0x3
    20                                               );
    21                                               
    22                                                   // Internal Register File
    23                                                   integer i;
    24                                                   reg [WIDTH-1:0] REG_FILE [DEPTH-1:0];
    25                                               
    26                                                   // Map internal registers to outputs
    27              1                        377         assign REG0 = REG_FILE[0];
    28              1                        377         assign REG1 = REG_FILE[1];
    29              1                        377         assign REG2 = REG_FILE[2];
    30              1                        377         assign REG3 = REG_FILE[3];
    31                                               
    32                                                   // Register File Write/Read Logic
    33              1                        869         always @(posedge CLK or negedge RST) 
    34                                                   begin
    35                                                       if (!RST) 
    36                                                           begin
    37              1                          8                     RdData <= {WIDTH{1'b0}};         // Clear read data
    38              1                          8                     for (i = 0; i < DEPTH; i = i + 1) 
    38              2                        128     
    39                                                               begin
    40              1                          8                         if      (i == 2) REG_FILE[i] <= 'b100000_0_1; // Default init value
    41              1                          8                         else if (i == 3) REG_FILE[i] <= 'b0010_0000; // Default init value
    42              1                        112                         else             REG_FILE[i] <= 'd0;          // Reset others
    43                                                               end
    44                                                           end
    45                                                       else if (WrEn && !RdEn) 
    46                                                           begin
    47              1                        609                     REG_FILE[Address] <= WrData;     // Write operation
    48                                                           end
    49                                                       else if (RdEn && !WrEn) 
    50                                                           begin
    51              1                         59                     RdData <= REG_FILE[Address];     // Read operation
    52                                                           end
    53                                                   end
    54                                               
    55                                                   // Read Valid Generation
    56              1                        468         always @(posedge CLK or negedge RST) 
    57                                                   begin
    58                                                       if (!RST) 
    59                                                           begin
    60              1                          8                     RdValid <= 1'b0;                 // Clear valid flag
    61                                                           end 
    62                                                       else if (RdEn && !WrEn)
    63                                                           begin
    64              1                         78                     RdValid <= 1'b1;                 // Assert valid when reading
    65                                                           end    
    66                                                       else 
    67                                                           begin
    68              1                        382                     RdValid <= 1'b0;                 // Otherwise deassert

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        178        89        89    50.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_RegFile --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                      Address[0-3]           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                         REG0[0-7]           1           1                              100.00 
                                         REG1[0-7]           1           1                              100.00 
                                           REG2[0]           0           0                                0.00 
                                           REG2[1]           0           1                               50.00 
                                         REG2[2-4]           0           0                                0.00 
                                         REG2[5-7]           1           1                              100.00 
                                         REG3[0-7]           0           0                                0.00 
                                               RST           1           1                              100.00 
                                       RdData[7-0]           1           1                              100.00 
                                              RdEn           1           1                              100.00 
                                           RdValid           1           1                              100.00 
                                       WrData[0-7]           1           1                              100.00 
                                              WrEn           1           1                              100.00 
                                           i[31-0]           0           0                                0.00 

Total Node Count     =         89 
Toggled Node Count   =         44 
Untoggled Node Count =         45 

Toggle Coverage      =      50.00% (89 of 178 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_ALU
=== Design Unit: work.ALU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        29        29         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_ALU

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALU.v
------------------------------------IF Branch------------------------------------
    24                                       925     Count coming in to IF
    24              1                          4         if     (!RST)  OUT_VALID <= 1'b0 ;  
    25              1                        462         else if(EN)    OUT_VALID <= 1'b1 ;
    26              1                        459         else           OUT_VALID <= 1'b0 ;
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    36                                       838     Count coming in to IF
    36              1                        403         if (EN)
    57              1                        435         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    38                                       403     Count coming in to CASE
    39              1                         23                 4'b0000: ALU_OUT = A + B ;                    // Addition
    40              1                         20                 4'b0001: ALU_OUT = A - B ;                    // Subtraction
    41              1                         27                 4'b0010: ALU_OUT = A * B ;                    // Multiplication
    42              1                         19                 4'b0011: ALU_OUT = (B) ? A / B : {2*WIDTH{1'b1}}; // Division (check B!=0)
    43              1                         21                 4'b0100: ALU_OUT = A & B ;                    // Bitwise AND
    44              1                         32                 4'b0101: ALU_OUT = A | B ;                    // Bitwise OR
    45              1                         36                 4'b0110: ALU_OUT = ~(A & B) ;                 // NAND
    46              1                         28                 4'b0111: ALU_OUT = ~(A | B) ;                 // NOR
    47              1                         31                 4'b1000: ALU_OUT = A ^ B ;                    // XOR
    48              1                         34                 4'b1001: ALU_OUT = ~(A ^ B) ;                 // XNOR
    49              1                         15                 4'b1010: ALU_OUT = (A == B) ? 'b1  : 'b0 ;    // Equality Check
    50              1                         23                 4'b1011: ALU_OUT = (A >  B) ? 'b10 : 'b0 ;    // Greater Than
    51              1                         26                 4'b1100: ALU_OUT = (A <  B) ? 'b11 : 'b0 ;    // Less Than
    52              1                         36                 4'b1101: ALU_OUT = A >> 1 ;                   // Logical Right Shift
    53              1                         22                 4'b1110: ALU_OUT = A << 1 ;                   // Logical Left Shift
    54              1                         10                 default: ALU_OUT = 'd0 ;                      // Default Case
Branch totals: 16 hits of 16 branches = 100.00%

------------------------------------IF Branch------------------------------------
    42                                        19     Count coming in to IF
    42              2                         11                 4'b0011: ALU_OUT = (B) ? A / B : {2*WIDTH{1'b1}}; // Division (check B!=0)
    42              3                          8                 4'b0011: ALU_OUT = (B) ? A / B : {2*WIDTH{1'b1}}; // Division (check B!=0)
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    49                                        15     Count coming in to IF
    49              2                          4                 4'b1010: ALU_OUT = (A == B) ? 'b1  : 'b0 ;    // Equality Check
    49              3                         11                 4'b1010: ALU_OUT = (A == B) ? 'b1  : 'b0 ;    // Equality Check
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    50                                        23     Count coming in to IF
    50              2                         20                 4'b1011: ALU_OUT = (A >  B) ? 'b10 : 'b0 ;    // Greater Than
    50              3                          3                 4'b1011: ALU_OUT = (A >  B) ? 'b10 : 'b0 ;    // Greater Than
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                        26     Count coming in to IF
    51              2                         20                 4'b1100: ALU_OUT = (A <  B) ? 'b11 : 'b0 ;    // Less Than
    51              3                          6                 4'b1100: ALU_OUT = (A <  B) ? 'b11 : 'b0 ;    // Less Than
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         3         0   100.00%

================================Condition Details================================

Condition Coverage for instance /\TB_TOP#DUT /U0_ALU --

  File ALU.v
----------------Focused Condition View-------------------
Line       49 Item    1  (A == B)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (A == B)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (A == B)_0            -                             
  Row   2:          1  (A == B)_1            -                             

----------------Focused Condition View-------------------
Line       50 Item    1  (A > B)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
     (A > B)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (A > B)_0             -                             
  Row   2:          1  (A > B)_1             -                             

----------------Focused Condition View-------------------
Line       51 Item    1  (A < B)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
     (A < B)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (A < B)_0             -                             
  Row   2:          1  (A < B)_1             -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        22         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_ALU --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALU.v
    1                                                module ALU #(parameter WIDTH = 8)
    2                                                (
    3                                                    // Input Ports
    4                                                    input wire               CLK       , // Clock Signal
    5                                                    input wire               RST       , // Active Low Reset
    6                                                    input wire               EN        , // Enable Signal
    7                                                    input wire [3:0]         ALU_FUN   , // ALU Function Selector
    8                                                    input wire [WIDTH-1:0]   A         , // Operand A
    9                                                    input wire [WIDTH-1:0]   B         , // Operand B
    10                                                   
    11                                                   // Output Ports
    12                                                   output reg [2*WIDTH-1:0] ALU_OUT   , // ALU Output Result
    13                                                   output reg               OUT_VALID   // Output Valid Signal
    14                                               );
    15                                               
    16                                               /////////////////////////////////////////////////////////////////////
    17                                               // OUT_VALID Control Logic
    18                                               // - Reset clears OUT_VALID
    19                                               // - Asserted when EN = 1
    20                                               // - De-asserted when EN = 0
    21                                               /////////////////////////////////////////////////////////////////////
    22              1                        925     always @(posedge CLK or negedge RST) 
    23                                               begin
    24              1                          4         if     (!RST)  OUT_VALID <= 1'b0 ;  
    25              1                        462         else if(EN)    OUT_VALID <= 1'b1 ;
    26              1                        459         else           OUT_VALID <= 1'b0 ;
    27                                               end  
    28                                               
    29                                               /////////////////////////////////////////////////////////////////////
    30                                               // ALU Operation
    31                                               // - Executed only when EN = 1
    32                                               // - Otherwise ALU_OUT is forced to 0
    33                                               /////////////////////////////////////////////////////////////////////
    34              1                        838     always @(posedge CLK or negedge RST) 
    35                                               begin
    36                                                   if (EN)
    37                                                   begin
    38                                                       case (ALU_FUN)
    39              1                         23                 4'b0000: ALU_OUT = A + B ;                    // Addition
    40              1                         20                 4'b0001: ALU_OUT = A - B ;                    // Subtraction
    41              1                         27                 4'b0010: ALU_OUT = A * B ;                    // Multiplication
    42              1                         19                 4'b0011: ALU_OUT = (B) ? A / B : {2*WIDTH{1'b1}}; // Division (check B!=0)
    43              1                         21                 4'b0100: ALU_OUT = A & B ;                    // Bitwise AND
    44              1                         32                 4'b0101: ALU_OUT = A | B ;                    // Bitwise OR
    45              1                         36                 4'b0110: ALU_OUT = ~(A & B) ;                 // NAND
    46              1                         28                 4'b0111: ALU_OUT = ~(A | B) ;                 // NOR
    47              1                         31                 4'b1000: ALU_OUT = A ^ B ;                    // XOR
    48              1                         34                 4'b1001: ALU_OUT = ~(A ^ B) ;                 // XNOR
    49              1                         15                 4'b1010: ALU_OUT = (A == B) ? 'b1  : 'b0 ;    // Equality Check
    50              1                         23                 4'b1011: ALU_OUT = (A >  B) ? 'b10 : 'b0 ;    // Greater Than
    51              1                         26                 4'b1100: ALU_OUT = (A <  B) ? 'b11 : 'b0 ;    // Less Than
    52              1                         36                 4'b1101: ALU_OUT = A >> 1 ;                   // Logical Right Shift
    53              1                         22                 4'b1110: ALU_OUT = A << 1 ;                   // Logical Left Shift
    54              1                         10                 default: ALU_OUT = 'd0 ;                      // Default Case
    55                                                       endcase 
    56                                                   end
    57                                                   else 
    58                                                   begin
    59              1                        435             ALU_OUT = 'd0 ; // Force output to 0 when disabled

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         80        80         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_ALU --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                      ALU_FUN[0-3]           1           1                              100.00 
                                     ALU_OUT[15-0]           1           1                              100.00 
                                            A[0-7]           1           1                              100.00 
                                            B[0-7]           1           1                              100.00 
                                               CLK           1           1                              100.00 
                                                EN           1           1                              100.00 
                                         OUT_VALID           1           1                              100.00 
                                               RST           1           1                              100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (80 of 80 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /U0_CLK_GATE
=== Design Unit: work.CLK_GATE
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /\TB_TOP#DUT /U0_CLK_GATE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CLK_GATE.v
------------------------------------IF Branch------------------------------------
    14                                      1389     Count coming in to IF
    14              1                        927       if(!CLK)      // active low
                                             462     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\TB_TOP#DUT /U0_CLK_GATE --

  File CLK_GATE.v
----------------Focused Expression View-----------------
Line       21 Item    1  (CLK && Latch_Out)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
         CLK         Y
   Latch_Out         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  CLK_0                 -                             
  Row   2:          1  CLK_1                 Latch_Out                     
  Row   3:          1  Latch_Out_0           CLK                           
  Row   4:          1  Latch_Out_1           CLK                           


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /\TB_TOP#DUT /U0_CLK_GATE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CLK_GATE.v
    1                                                module CLK_GATE 
    2                                                (
    3                                                    input   wire CLK      ,
    4                                                    input   wire CLK_EN   ,
    5                                                    output  wire GATED_CLK
    6                                                );
    7                                                
    8                                                //internal connections
    9                                                reg Latch_Out ;
    10                                               
    11                                               //latch (Level Sensitive Device)
    12              1                       1389     always @(CLK or CLK_EN)
    13                                                begin
    14                                                 if(!CLK)      // active low
    15                                                  begin
    16              1                        927         Latch_Out <= CLK_EN ;
    17                                                  end
    18                                                end
    19                                                
    20                                               // ANDING
    21              1                   15237917     assign  GATED_CLK = CLK && Latch_Out ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /U0_CLK_GATE --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                               CLK           1           1                              100.00 
                                            CLK_EN           1           1                              100.00 
                                         GATED_CLK           1           1                              100.00 
                                         Latch_Out           1           1                              100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT /u_TB_SVA
=== Design Unit: work.TB_SVA
=================================================================================

Assertion Coverage:
    Assertions                      10         7         3    70.00%
--------------------------------------------------------------------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass     Vacuous    Disable    Attempt     Active Peak Active ATV
                                                  Count        Count    Count      Count      Count       Count  Count          
--------------------------------------------------------------------------------------------------------------------------------
/\TB_TOP#DUT /u_TB_SVA/assert__p_no_framing_error
                     TB_SVA.sv(122)                     4     561700          0          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_no_parity_error
                     TB_SVA.sv(119)                   264     561440          0          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_TX_D_VLD_once
                     TB_SVA.sv(116)                     0    7225377          0      32601    7618726     360748      360748 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_RdData_Valid_once
                     TB_SVA.sv(113)                     0    6616428          0     641550    7618726     360748      872837 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_OUT_VALID_once
                     TB_SVA.sv(110)                     0    7257944          0         34    7618726     360748      360748 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_fifo_no_write_full
                     TB_SVA.sv(107)                     0          0    7618692         34    7618726          0           0 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_result_regfile
                     TB_SVA.sv(104)                     0         39    7618653         34    7618726          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_result_tx
                     TB_SVA.sv(101)                     0        231    7618461         34    7618726          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_fifo_no_read_empty
                     TB_SVA.sv(98)                      0     447080     114624          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_clk_gate
                     TB_SVA.sv(95)                      0    6415131    1203595          0    7618726          0           1 off

Directive Coverage:
    Directives                      10         9         1    90.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/\TB_TOP#DUT /u_TB_SVA/cover__p_no_framing_error 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(123)  561700 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_no_parity_error 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(120)  561440 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_TX_D_VLD_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(117)  7225377 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_RdData_Valid_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(114)  6616428 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_OUT_VALID_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(111)  7257944 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_fifo_no_write_full 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(108)     0 ZERO      
/\TB_TOP#DUT /u_TB_SVA/cover__p_result_regfile 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(105)    39 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_result_tx 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(102)   231 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_fifo_no_read_empty 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(99)   447080 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_clk_gate TB_SVA Verilog  SVA  TB_SVA.sv(96)   6415131 Covered   
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        28         2    93.33%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT /u_TB_SVA --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            CLK_EN           1           1                              100.00 
                                             EMPTY           1           1                              100.00 
                                              FULL           0           0                                0.00 
                                         GATED_CLK           1           1                              100.00 
                                         OUT_VALID           1           1                              100.00 
                                           PAR_ERR           1           1                              100.00 
                                           REF_CLK           1           1                              100.00 
                                             RST_N           1           1                              100.00 
                                             R_INC           1           1                              100.00 
                                      RdData_Valid           1           1                              100.00 
                                           STP_ERR           1           1                              100.00 
                                          TX_D_VLD           1           1                              100.00 
                                          UART_CLK           1           1                              100.00 
                                        UART_RX_IN           1           1                              100.00 
                                             W_INC           1           1                              100.00 

Total Node Count     =         15 
Toggled Node Count   =         14 
Untoggled Node Count =          1 

Toggle Coverage      =      93.33% (28 of 30 bins)

=================================================================================
=== Instance: /\TB_TOP#DUT 
=== Design Unit: work.SYS_TOP
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        268       237        31    88.43%

================================Toggle Details================================

Toggle Coverage for instance /\TB_TOP#DUT  --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                           ALU_CLK           1           1                              100.00 
                                            ALU_EN           1           1                              100.00 
                                      ALU_FUN[0-3]           1           1                              100.00 
                                     ALU_OUT[0-15]           1           1                              100.00 
                                       ALU_OUT_VLD           1           1                              100.00 
                                         CLKDIV_EN           0           0                                0.00 
                                           CLKG_EN           1           1                              100.00 
                                    DIV_RATIO[0-7]           0           0                                0.00 
                                 DIV_RATIO_RX[0-2]           1           1                              100.00 
                                   DIV_RATIO_RX[3]           0           0                                0.00 
                                         FIFO_FULL           0           0                                0.00 
                                    Operand_A[0-7]           1           1                              100.00 
                                    Operand_B[0-7]           1           1                              100.00 
                                           REF_CLK           1           1                              100.00 
                                   RF_Address[0-3]           1           1                              100.00 
                                    RF_RdData[0-7]           1           1                              100.00 
                                     RF_RdData_VLD           1           1                              100.00 
                                           RF_RdEn           1           1                              100.00 
                                    RF_WrData[0-7]           1           1                              100.00 
                                           RF_WrEn           1           1                              100.00 
                                             RST_N           1           1                              100.00 
                                      SYNC_REF_RST           1           1                              100.00 
                                     SYNC_UART_RST           1           1                              100.00 
                                          UART_CLK           1           1                              100.00 
                                    UART_Config[0]           0           0                                0.00 
                                    UART_Config[1]           0           1                               50.00 
                                  UART_Config[2-4]           0           0                                0.00 
                                  UART_Config[5-7]           1           1                              100.00 
                                       UART_RX_CLK           1           1                              100.00 
                                        UART_RX_IN           1           1                              100.00 
                                  UART_RX_OUT[0-7]           1           1                              100.00 
                                 UART_RX_SYNC[0-7]           1           1                              100.00 
                                     UART_RX_V_OUT           1           1                              100.00 
                                    UART_RX_V_SYNC           1           1                              100.00 
                                      UART_TX_Busy           1           1                              100.00 
                                UART_TX_Busy_PULSE           1           1                              100.00 
                                       UART_TX_CLK           1           1                              100.00 
                                   UART_TX_IN[0-7]           1           1                              100.00 
                                         UART_TX_O           1           1                              100.00 
                                 UART_TX_SYNC[0-7]           1           1                              100.00 
                                       UART_TX_VLD           1           1                              100.00 
                                    UART_TX_V_SYNC           1           1                              100.00 
                                     framing_error           1           1                              100.00 
                                      parity_error           1           1                              100.00 

Total Node Count     =        134 
Toggled Node Count   =        118 
Untoggled Node Count =         16 

Toggle Coverage      =      88.43% (237 of 268 bins)


DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/\TB_TOP#DUT /u_TB_SVA/cover__p_no_framing_error 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(123)  561700 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_no_parity_error 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(120)  561440 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_TX_D_VLD_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(117)  7225377 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_RdData_Valid_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(114)  6616428 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_OUT_VALID_once 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(111)  7257944 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_fifo_no_write_full 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(108)     0 ZERO      
/\TB_TOP#DUT /u_TB_SVA/cover__p_result_regfile 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(105)    39 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_result_tx 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(102)   231 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_fifo_no_read_empty 
                                         TB_SVA Verilog  SVA  TB_SVA.sv(99)   447080 Covered   
/\TB_TOP#DUT /u_TB_SVA/cover__p_clk_gate TB_SVA Verilog  SVA  TB_SVA.sv(96)   6415131 Covered   

TOTAL DIRECTIVE COVERAGE: 90.00%  COVERS: 10

ASSERTION RESULTS:
--------------------------------------------------------------------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass     Vacuous    Disable    Attempt     Active Peak Active ATV
                                                  Count        Count    Count      Count      Count       Count  Count          
--------------------------------------------------------------------------------------------------------------------------------
/\TB_TOP#DUT /u_TB_SVA/assert__p_no_framing_error
                     TB_SVA.sv(122)                     4     561700          0          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_no_parity_error
                     TB_SVA.sv(119)                   264     561440          0          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_TX_D_VLD_once
                     TB_SVA.sv(116)                     0    7225377          0      32601    7618726     360748      360748 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_RdData_Valid_once
                     TB_SVA.sv(113)                     0    6616428          0     641550    7618726     360748      872837 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_OUT_VALID_once
                     TB_SVA.sv(110)                     0    7257944          0         34    7618726     360748      360748 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_fifo_no_write_full
                     TB_SVA.sv(107)                     0          0    7618692         34    7618726          0           0 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_result_regfile
                     TB_SVA.sv(104)                     0         39    7618653         34    7618726          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_result_tx
                     TB_SVA.sv(101)                     0        231    7618461         34    7618726          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_fifo_no_read_empty
                     TB_SVA.sv(98)                      0     447080     114624          4     561708          0           1 off
/\TB_TOP#DUT /u_TB_SVA/assert__p_clk_gate
                     TB_SVA.sv(95)                      0    6415131    1203595          0    7618726          0           1 off

Total Coverage By Instance (filtered view): 77.93%

